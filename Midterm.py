import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import sklearn.preprocessing as skp
import plotly.express as px

# Thi·∫øt l·∫≠p c·∫•u h√¨nh trang
st.set_page_config(page_title="Ph√¢n T√≠ch B·ªánh Ph·ªïi", page_icon="ü´Å", layout="wide", initial_sidebar_state="expanded")

# Thi·∫øt l·∫≠p b·∫£ng m√†u
sns.set_palette("colorblind")
PALETTE = ["#88CCEE", "#44AA99", "#117733", "#999933", "#DDCC77", "#CC6677", "#882255", "#AA4499"]

# --- H√†m t·∫£i v√† ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu ---
@st.cache_data(show_spinner=False)
def load_and_preprocess_data(file):
    try:
        # ƒê·ªçc d·ªØ li·ªáu t·ª´ t·ªáp ƒë∆∞·ª£c t·∫£i l√™n
        df = pd.read_csv(file, na_values=["None", " ", "UNKNOWN", -1, 999, "NA", "N/A", "NULL", ""])
        
        # X√°c ƒë·ªãnh t√™n c·ªôt c√≥ th·ªÉ b·∫±ng ti·∫øng Anh ho·∫∑c ti·∫øng Vi·ªát
        col_mapping = {
            "Age": "Tu·ªïi", "Gender": "Gi·ªõi T√≠nh", "Smoking Status": "T√¨nh Tr·∫°ng H√∫t Thu·ªëc",
            "Lung Capacity": "Dung T√≠ch Ph·ªïi", "Disease Type": "Lo·∫°i B·ªánh", 
            "Treatment Type": "Lo·∫°i ƒêi·ªÅu Tr·ªã", "Hospital Visits": "S·ªë L∆∞·ª£t Kh√°m B·ªánh", 
            "Recovered": "H·ªìi Ph·ª•c"
        }
        df.columns = [col_mapping.get(col, col) for col in df.columns]
        
        # Chuy·ªÉn ƒë·ªïi c√°c c·ªôt sang ki·ªÉu s·ªë
        numeric_cols = ["Tu·ªïi", "Dung T√≠ch Ph·ªïi", "S·ªë L∆∞·ª£t Kh√°m B·ªánh"]
        for col in numeric_cols:
            df[col] = pd.to_numeric(df[col], errors='coerce')
        
        # Chuy·ªÉn ƒë·ªïi c·ªôt H·ªìi Ph·ª•c sang ki·ªÉu s·ªë (0/1)
        df["H·ªìi Ph·ª•c"] = df["H·ªìi Ph·ª•c"].map({"C√≥": 1, "Yes": 1, "Kh√¥ng": 0, "No": 0})
        
        # ƒê·∫£m b·∫£o c√°c c·ªôt ph√¢n lo·∫°i ƒë∆∞·ª£c x·ª≠ l√Ω ƒë√∫ng
        categorical_cols = ["Gi·ªõi T√≠nh", "T√¨nh Tr·∫°ng H√∫t Thu·ªëc", "Lo·∫°i B·ªánh", "Lo·∫°i ƒêi·ªÅu Tr·ªã"]
        for col in categorical_cols:
            df[col] = df[col].astype('category')
        return df
    except Exception as e:
        st.error(f"L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu: {e}")
        st.stop()

# H√†m m√£ h√≥a d·ªØ li·ªáu ph√¢n lo·∫°i (ch·ªâ d√πng cho t∆∞∆°ng quan)
def encode_data(data):
    encoder = skp.LabelEncoder()
    encoded_data = data.copy()
    for col in data.select_dtypes(include=['object', 'category']).columns:
        encoded_data[col] = encoder.fit_transform(data[col].astype(str))
    return encoded_data

# H√†m v·∫Ω ƒë·ªì th·ªã t·ª∑ l·ªá ph·ª•c h·ªìi b·ªánh
def plot_recovery_by_disease(df, chart_type='Pie'):
    # T√≠nh t·ª∑ l·ªá ph·∫ßn trƒÉm ph·ª•c h·ªìi theo lo·∫°i b·ªánh
    recovery_rates = df.groupby('Lo·∫°i B·ªánh')['H·ªìi Ph·ª•c'].value_counts(normalize=True).unstack() * 100
    
    if chart_type == 'Stacked':
        # Stacked bar chart
        plt.figure(figsize=(10, 6))
        recovery_rates.plot(kind='bar', stacked=True, color=['#FF6B6B', '#4ECDC4'])
        plt.title('T·ª∑ l·ªá ph·ª•c h·ªìi theo lo·∫°i b·ªánh', fontsize=14, pad=15)
        plt.xlabel('Lo·∫°i b·ªánh', fontsize=12)
        plt.ylabel('T·ª∑ l·ªá (%)', fontsize=12)
        plt.legend(title='H·ªìi ph·ª•c', loc='center left', bbox_to_anchor=(1.0, 0.5))
        plt.xticks(rotation=45, ha='right')
        plt.yticks(ticks=range(0, 101, 10), labels=[f"{i}%" for i in range(0, 101, 10)])
        plt.tight_layout()
    else:  # default to pie chart
        # Pie chart cho t·ª´ng lo·∫°i b·ªánh
        fig, axes = plt.subplots(2, 3, figsize=(15, 10))  #
        axes = axes.flatten()  
        diseases = recovery_rates.index
        for idx, disease in enumerate(diseases):
            if idx < len(axes):
                axes[idx].pie(recovery_rates.loc[disease], labels=recovery_rates.columns,
                             autopct='%1.1f%%', colors=['#FF6B6B', '#4ECDC4'], startangle=90)
                axes[idx].set_title(f'{disease}', fontsize=10)
        for idx in range(len(diseases), len(axes)):
            axes[idx].axis('off')
        plt.suptitle('T·ª∑ l·ªá ph·ª•c h·ªìi theo lo·∫°i b·ªánh', fontsize=14, y=1.05)
        plt.tight_layout()
    
    return plt

# H√†m t·∫°o bi·ªÉu ƒë·ªì ·∫£nh h∆∞·ªüng c·ªßa h√∫t thu·ªëc (stacked bar chart ho·∫∑c pie chart)
def plot_smoking_impact(df, chart_type='Stacked'):
    # T√≠nh t·ª∑ l·ªá ph·∫ßn trƒÉm ph·ª•c h·ªìi theo t√¨nh tr·∫°ng h√∫t thu·ªëc
    smoking_impact = df.groupby('T√¨nh Tr·∫°ng H√∫t Thu·ªëc')['H·ªìi Ph·ª•c'].value_counts(normalize=True).unstack() * 100
    
    if chart_type == 'Stacked':
        # Stacked bar chart
        plt.figure(figsize=(8, 6))
        smoking_impact.plot(kind='bar', stacked=True, color=['#FF6B6B', '#4ECDC4'])
        plt.title('·∫¢nh h∆∞·ªüng c·ªßa h√∫t thu·ªëc ƒë·∫øn kh·∫£ nƒÉng ph·ª•c h·ªìi', fontsize=14, pad=15)
        plt.xlabel('T√¨nh tr·∫°ng h√∫t thu·ªëc', fontsize=12)
        plt.ylabel('T·ª∑ l·ªá (%)', fontsize=12)
        plt.legend(title='Ph·ª•c H·ªìi', loc='center left', bbox_to_anchor=(1.0, 0.5))
        plt.xticks(rotation=0)
        # Chia tr·ª•c y th√†nh 10 kho·∫£ng t·ª´ 0% ƒë·∫øn 100%
        plt.yticks(ticks=range(0, 101, 10), labels=[f"{i}%" for i in range(0, 101, 10)])
        plt.tight_layout()
        return plt
    else:  # Pie chart
        fig, axes = plt.subplots(1, 2, figsize=(12, 6))
        for idx, smoking_status in enumerate(smoking_impact.index):
            axes[idx].pie(smoking_impact.loc[smoking_status], labels=smoking_impact.columns,
                          autopct='%1.1f%%', colors=['#FF6B6B', '#4ECDC4'], startangle=90)
            axes[idx].set_title(f'T√¨nh tr·∫°ng: {smoking_status}', fontsize=12)
        plt.suptitle('·∫¢nh h∆∞·ªüng c·ªßa h√∫t thu·ªëc ƒë·∫øn kh·∫£ nƒÉng ph·ª•c h·ªìi', fontsize=14, y=1.05)
        plt.tight_layout()
        return plt
    
    
# --- T·∫£i d·ªØ li·ªáu t·ª´ ng∆∞·ªùi d√πng ---
st.sidebar.header("T·∫£i D·ªØ Li·ªáu")
uploaded_file = st.sidebar.file_uploader("T·∫£i l√™n t·ªáp CSV", type=["csv"])
if uploaded_file is not None:
    df = load_and_preprocess_data(uploaded_file)
else:
    st.warning("Vui l√≤ng t·∫£i l√™n t·ªáp CSV ƒë·ªÉ ti·∫øp t·ª•c.")
    st.stop()

# --- CSS t√πy ch·ªânh cho giao di·ªán ---
st.markdown("""
    <style>
    div[role="radiogroup"] label {
        display: flex;
        align-items: center;
        font-size: 18px;
        font-weight: bold;
        color: #333;
        padding: 10px 15px;
        border-radius: 8px;
        transition: background-color 0.3s ease, transform 0.2s ease;
        cursor: pointer;
    }
    div[role="radiogroup"] label span {
        visibility: hidden;
        width: 0;
        margin: 0;
        padding: 0;
    }
    div[role="radiogroup"] label:hover {
        background-color: #FF851B;
        color: white !important;
        transform: scale(1.02);
    }
    div[role="radiogroup"] label[data-selected="true"] {
        background-color: #FF851B !important;
        color: white !important;
        font-weight: bold;
    }
    </style>
""", unsafe_allow_html=True)

# --- Ti√™u ƒë·ªÅ v√† ƒëi·ªÅu h∆∞·ªõng sidebar ---
st.title("ü´Å B·∫£ng ƒêi·ªÅu Khi·ªÉn Ph√¢n T√≠ch B·ªánh Ph·ªïi")
page = st.sidebar.radio("Ch·ªçn Trang", [
    "1. Gi·ªõi Thi·ªáu D·ªØ Li·ªáu", 
    "2. Th·ªëng K√™ M√¥ T·∫£", 
    "3. Ph√¢n T√≠ch Chuy√™n S√¢u", 
    "4. Nh·∫≠n X√©t Chung", 
], index=0)

# --- Trang 1: Gi·ªõi Thi·ªáu D·ªØ Li·ªáu ---
if page == "1. Gi·ªõi Thi·ªáu D·ªØ Li·ªáu":
    st.header("1. Gi·ªõi Thi·ªáu D·ªØ Li·ªáu")
    st.subheader("Ngu·ªìn G·ªëc D·ªØ Li·ªáu")
    st.markdown("""
    - D·ªØ li·ªáu ƒë∆∞·ª£c l·∫•y t·ª´ n·ªÅn t·∫£ng Kaggle: [Lung Disease Prediction](https://www.kaggle.com/datasets/samikshadalvi/lungs-diseases-dataset).
    - T·∫≠p d·ªØ li·ªáu bao g·ªìm th√¥ng tin v·ªÅ b·ªánh nh√¢n m·∫Øc c√°c b·ªánh ph·ªïi nh∆∞ hen suy·ªÖn, vi√™m ph·∫ø qu·∫£n, COPD, ung th∆∞ ph·ªïi, v√† vi√™m ph·ªïi.
    - D·ªØ li·ªáu bao g·ªìm c√°c th√¥ng tin nh√¢n kh·∫©u h·ªçc, t√¨nh tr·∫°ng h√∫t thu·ªëc, dung t√≠ch ph·ªïi, s·ªë l∆∞·ª£t kh√°m b·ªánh, v√† k·∫øt qu·∫£ h·ªìi ph·ª•c.
    """)

    st.subheader("M√¥ T·∫£ D·ªØ Li·ªáu")
    st.markdown("""
    - **üßë‚Äçü§ù‚ÄçüßëAge:** Tu·ªïi c·ªßa b·ªánh nh√¢n (s·ªë nguy√™n).
    - **‚ôÄÔ∏èGender:** Gi·ªõi t√≠nh (Male/Female).
    - **üö¨Smoking Status:** T√¨nh tr·∫°ng h√∫t thu·ªëc (Yes/No).
    - **üå°Ô∏èLung Capacity:** Dung t√≠ch ph·ªïi c·ªßa b·ªánh nh√¢n (s·ªë th·ª±c, ƒë∆°n v·ªã l√≠t).
    - **ü´ÅDisease Type:** Lo·∫°i b·ªánh ph·ªïi (Asthma, Bronchitis, COPD, Lung Cancer, Pneumonia).
    - **üíäTreatment Type:** Lo·∫°i ƒëi·ªÅu tr·ªã (Medication, Surgery, Therapy).
    - **üè•Hospital Visits:** S·ªë l∆∞·ª£t kh√°m b·ªánh (s·ªë nguy√™n).
    - **‚úÖRecovered:** B·ªánh nh√¢n ƒë√£ h·ªìi ph·ª•c ch∆∞a? (0: No, 1: Yes).
    """)

    with st.expander("Xem To√†n B·ªô D·ªØ Li·ªáu Th√¥ (ƒë√£ d·ªãch sang ti·∫øng Vi·ªát)"):
        st.dataframe(df)

# --- Trang 2: Th·ªëng K√™ M√¥ T·∫£ ---
elif page == "2. Th·ªëng K√™ M√¥ T·∫£":
    st.header("2. Th·ªëng K√™ M√¥ T·∫£")
    st.subheader("Th√¥ng Tin D·ªØ Li·ªáu")
    st.dataframe(df.describe())

    st.subheader("Ph√¢n Ph·ªëi D·ªØ Li·ªáu")
    numeric_cols = df.select_dtypes(include=np.number).columns
    cat_cols = df.select_dtypes(include=['category']).columns.tolist()

    # Ph√¢n ph·ªëi bi·∫øn s·ªë
    num_select = st.selectbox("Ch·ªçn m·ªôt bi·∫øn s·ªë ƒë·ªÉ xem ph√¢n ph·ªëi bi·∫øn c·ªßa bi·∫øn numerical:", numeric_cols)
    if num_select:
        fig, ax = plt.subplots(figsize=(10, 6))
        sns.histplot(df[num_select].dropna(), kde=True, color=PALETTE[0], ax=ax)
        ax.set_title(f"Ph√¢n b·ªë c·ªßa {num_select}")
        st.pyplot(fig)

    with st.expander("Nh·∫≠n x√©t v·ªÅ Th·ªëng K√™ M√¥ T·∫£"):
        st.markdown("""
        - **Tu·ªïi:** Tu·ªïi trung b√¨nh, ƒë·ªô l·ªách chu·∫©n, v√† ph·∫°m vi tu·ªïi c·ªßa b·ªánh nh√¢n.
        - **Dung T√≠ch Ph·ªïi:** Dung t√≠ch ph·ªïi trung b√¨nh v√† ph√¢n ph·ªëi (ƒë∆°n v·ªã l√≠t).
        - **S·ªë L∆∞·ª£t Kh√°m B·ªánh:** S·ªë l∆∞·ª£t kh√°m trung b√¨nh.
        - **H·ªìi Ph·ª•c:** T·ª∑ l·ªá h·ªìi ph·ª•c (0: Kh√¥ng, 1: C√≥).
        """)

    # Ph√¢n ph·ªëi bi·∫øn ph√¢n lo·∫°i
    cat_select = st.selectbox("Ch·ªçn m·ªôt bi·∫øn ph√¢n lo·∫°i ƒë·ªÉ xem ph√¢n ph·ªëi c·ªßa bi·∫øn categorical:", cat_cols)
    if cat_select:
        fig, ax = plt.subplots(figsize=(10, 6))
        sns.countplot(x=df[cat_select], palette=PALETTE, ax=ax)
        ax.set_title(f"Ph√¢n b·ªë c·ªßa {cat_select}")
        plt.xticks(rotation=45, ha="right")
        st.pyplot(fig)


# --- Trang 3: Ph√¢n T√≠ch Chuy√™n S√¢u ---
elif page == "3. Ph√¢n T√≠ch Chuy√™n S√¢u":
    st.header("3. Ph√¢n T√≠ch Chuy√™n S√¢u")
    analysis_page = st.selectbox("Ch·ªçn Ph√¢n T√≠ch", [
        "Th·ªëng k√™ chung", 
        "Tu·ªïi & Dung T√≠ch Ph·ªïi", 
        "Dung L∆∞·ª£ng Ph·ªïi Trung B√¨nh Theo Nh√≥m Tu·ªïi v√† Lo·∫°i B·ªánh",
        "Lo·∫°i B·ªánh", 
        "H√∫t Thu·ªëc & Dung T√≠ch Ph·ªïi", 
        "L∆∞·ª£t Kh√°m B·ªánh", 
        "T∆∞∆°ng Quan",
        "Ph√¢n T√≠ch Song Bi·∫øn (Bivariate Analysis)",
        "T·ª∑ l·ªá h·ªìi ph·ª•c"
    ])
    
    # Th·ªëng k√™ chung
    if analysis_page == "Th·ªëng k√™ chung":
        st.subheader("Th·ªëng K√™ Chung")
        
        # Kh√¥ng lo·∫°i b·ªè NaN ·ªü ƒë√¢y ƒë·ªÉ gi·ªØ th√¥ng tin t·ªïng qu√°t, bao g·ªìm c·∫£ gi√° tr·ªã thi·∫øu
        total_patients = len(df)
        avg_age = df["Tu·ªïi"].mean()  # mean() t·ª± ƒë·ªông x·ª≠ l√Ω NaN
        avg_lung_capacity = df["Dung T√≠ch Ph·ªïi"].mean()
        smoking_rate = (df["T√¨nh Tr·∫°ng H√∫t Thu·ªëc"] == "C√≥").mean() * 100

        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("T·ªïng S·ªë B·ªánh Nh√¢n", total_patients)
        with col2:
            st.metric("Tu·ªïi Trung B√¨nh", f"{avg_age:.2f}" if not pd.isna(avg_age) else "N/A")
        with col3:
            st.metric("Dung T√≠ch Ph·ªïi Trung B√¨nh", f"{avg_lung_capacity:.2f}" if not pd.isna(avg_lung_capacity) else "N/A")
        with col4:
            st.metric("T·ª∑ L·ªá H√∫t Thu·ªëc (%)", f"{smoking_rate:.2f}" if not pd.isna(smoking_rate) else "N/A")

        with st.expander("Xem Nh·∫≠n X√©t Chi Ti·∫øt"):
            st.markdown(f"""
            - **T·ªïng S·ªë B·ªánh Nh√¢n:** {total_patients}
                - Cho bi·∫øt quy m√¥ c·ªßa t·∫≠p d·ªØ li·ªáu.
            - **Tu·ªïi Trung B√¨nh:** {f'{avg_age:.2f}' if not pd.isna(avg_age) else 'N/A'}
                - ƒê·ªô tu·ªïi trung b√¨nh c·ªßa b·ªánh nh√¢n, ph·∫£n √°nh ƒë·∫∑c ƒëi·ªÉm d√¢n s·ªë nghi√™n c·ª©u.
            - **Dung T√≠ch Ph·ªïi Trung B√¨nh:** {f'{avg_lung_capacity:.2f}' if not pd.isna(avg_lung_capacity) else 'N/A'}
                - Dung t√≠ch ph·ªïi trung b√¨nh, c√≥ th·ªÉ b·ªã ·∫£nh h∆∞·ªüng b·ªüi b·ªánh l√Ω ho·∫∑c h√∫t thu·ªëc.
            - **T·ª∑ L·ªá H√∫t Thu·ªëc:** {f'{smoking_rate:.2f}%' if not pd.isna(smoking_rate) else 'N/A'}
                - Ph·∫ßn trƒÉm b·ªánh nh√¢n h√∫t thu·ªëc, m·ªôt y·∫øu t·ªë nguy c∆° quan tr·ªçng ƒë·ªëi v·ªõi b·ªánh ph·ªïi.
            """)
    
    # Ph√¢n b·ªë Tu·ªïi & Dung T√≠ch Ph·ªïi
    elif analysis_page == "Tu·ªïi & Dung T√≠ch Ph·ªïi":
        st.subheader("Ph√¢n B·ªë Tu·ªïi & Dung T√≠ch Ph·ªïi")

        # X·ª≠ l√Ω gi√° tr·ªã thi·∫øu tr∆∞·ªõc khi l·ªçc
        filtered_df = df.dropna(subset=["Tu·ªïi", "Dung T√≠ch Ph·ªïi"])

        # Thanh tr∆∞·ª£t ch·ªçn kho·∫£ng tu·ªïi (n·∫øu c√≥ d·ªØ li·ªáu h·ª£p l·ªá)
        if not filtered_df["Tu·ªïi"].isnull().all():
            age_range = st.slider("Ch·ªçn Kho·∫£ng Tu·ªïi", int(filtered_df["Tu·ªïi"].min()), int(filtered_df["Tu·ªïi"].max()), 
                                  (int(filtered_df["Tu·ªïi"].min()), int(filtered_df["Tu·ªïi"].max())))
            filtered_df = filtered_df[(filtered_df["Tu·ªïi"] >= age_range[0]) & (filtered_df["Tu·ªïi"] <= age_range[1])]
        else:
            st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu tu·ªïi h·ª£p l·ªá ƒë·ªÉ hi·ªÉn th·ªã.")
            st.stop()

        fig, ax = plt.subplots(1, 2, figsize=(12, 5))
        sns.histplot(filtered_df["Tu·ªïi"], bins=20, kde=True, ax=ax[0], color=PALETTE[0])
        ax[0].set_title("Ph√¢n B·ªë Tu·ªïi")
        ax[0].set_xlabel("Tu·ªïi")
        ax[0].set_ylabel("S·ªë L∆∞·ª£ng")
        sns.histplot(filtered_df["Dung T√≠ch Ph·ªïi"], bins=20, kde=True, ax=ax[1], color=PALETTE[1])
        ax[1].set_title("Ph√¢n B·ªë Dung T√≠ch Ph·ªïi")
        ax[1].set_xlabel("Dung T√≠ch Ph·ªïi (l√≠t)")
        ax[1].set_ylabel("S·ªë L∆∞·ª£ng")
        st.pyplot(fig)

        with st.expander("Xem Nh·∫≠n X√©t Chi Ti·∫øt"):
            st.markdown(f"""
            **Bi·ªÉu ƒë·ªì Ph√¢n B·ªë Tu·ªïi:**
            - Hi·ªÉn th·ªã s·ª± ph√¢n b·ªë ƒë·ªô tu·ªïi c·ªßa b·ªánh nh√¢n (sau khi l·ªçc v√† lo·∫°i b·ªè gi√° tr·ªã thi·∫øu).
            - **H√¨nh d·∫°ng ph√¢n b·ªë:** Quan s√°t ph√¢n b·ªë ƒë·ªëi x·ª©ng, l·ªách tr√°i, l·ªách ph·∫£i hay ƒëa ƒë·ªânh. V√≠ d·ª•, ph√¢n b·ªë l·ªách ph·∫£i cho th·∫•y nhi·ªÅu b·ªánh nh√¢n l·ªõn tu·ªïi h∆°n.
            - **ƒê·ªô t·∫≠p trung:** X√°c ƒë·ªãnh kho·∫£ng tu·ªïi ph·ªï bi·∫øn nh·∫•t (ƒë·ªânh c·ªßa bi·ªÉu ƒë·ªì).
            - **ƒê∆∞·ªùng KDE:** ƒê∆∞·ªùng cong KDE ∆∞·ªõc l∆∞·ª£ng m·∫≠t ƒë·ªô x√°c su·∫•t, cho th·∫•y xu h∆∞·ªõng chung.

            **Bi·ªÉu ƒë·ªì Ph√¢n B·ªë Dung T√≠ch Ph·ªïi:**
            - Hi·ªÉn th·ªã s·ª± ph√¢n b·ªë dung t√≠ch ph·ªïi (l√≠t) c·ªßa b·ªánh nh√¢n.
            - **H√¨nh d·∫°ng ph√¢n b·ªë:** Quan s√°t t√≠nh ƒë·ªëi x·ª©ng ho·∫∑c l·ªách c·ªßa ph√¢n b·ªë.
            - **ƒê·ªô t·∫≠p trung:** X√°c ƒë·ªãnh kho·∫£ng dung t√≠ch ph·ªïi ph·ªï bi·∫øn nh·∫•t.
            - **ƒê·ªô ph√¢n t√°n:** Ph√¢n b·ªë r·ªông cho th·∫•y s·ª± kh√°c bi·ªát l·ªõn v·ªÅ dung t√≠ch ph·ªïi; ph√¢n b·ªë h·∫πp cho th·∫•y s·ª± ƒë·ªìng ƒë·ªÅu.
            - **ƒê∆∞·ªùng KDE:** ƒê∆∞·ªùng cong KDE gi√∫p h√¨nh dung xu h∆∞·ªõng chung.
            - **So s√°nh v·ªõi tu·ªïi:** C√≥ th·ªÉ c√≥ m·ªëi li√™n h·ªá gi·ªØa tu·ªïi v√† dung t√≠ch ph·ªïi (v√≠ d·ª•: dung t√≠ch gi·∫£m khi tu·ªïi tƒÉng).
            """)

    # Ph√¢n b·ªë Lo·∫°i B·ªánh
    elif analysis_page == "Lo·∫°i B·ªánh":
        st.subheader("Ph√¢n B·ªë Lo·∫°i B·ªánh")
        disease_counts = df["Lo·∫°i B·ªánh"].value_counts()
        st.bar_chart(disease_counts)

        with st.expander("Xem Nh·∫≠n X√©t Chi Ti·∫øt"):
            st.markdown("""
            **Bi·ªÉu ƒë·ªì C·ªôt Ph√¢n B·ªë Lo·∫°i B·ªánh:**
            - Th·ªÉ hi·ªán s·ªë l∆∞·ª£ng b·ªánh nh√¢n m·∫Øc m·ªói lo·∫°i b·ªánh ph·ªïi trong d·ªØ li·ªáu.
            - **So s√°nh t·∫ßn su·∫•t:** Lo·∫°i b·ªánh n√†o ph·ªï bi·∫øn nh·∫•t (c·ªôt cao nh·∫•t) v√† √≠t g·∫∑p nh·∫•t (c·ªôt th·∫•p nh·∫•t)?
            - **Ch√™nh l·ªách:** ƒê√°nh gi√° m·ª©c ƒë·ªô ch√™nh l·ªách gi·ªØa c√°c lo·∫°i b·ªánh, c√≥ th·ªÉ li√™n quan ƒë·∫øn y·∫øu t·ªë nguy c∆° ho·∫∑c d·ªãch t·ªÖ.
            - **L∆∞u √Ω:** M·ªói b·ªánh nh√¢n ch·ªâ ƒë∆∞·ª£c ghi nh·∫≠n m·ªôt lo·∫°i b·ªánh ch√≠nh trong c·ªôt n√†y.
            """)

    # H√∫t Thu·ªëc & Dung T√≠ch Ph·ªïi
    elif analysis_page == "H√∫t Thu·ªëc & Dung T√≠ch Ph·ªïi":
        st.subheader("·∫¢nh H∆∞·ªüng c·ªßa H√∫t Thu·ªëc l√™n Dung T√≠ch Ph·ªïi")

        # X·ª≠ l√Ω gi√° tr·ªã thi·∫øu tr∆∞·ªõc khi v·∫Ω bi·ªÉu ƒë·ªì
        plot_df = df.dropna(subset=["T√¨nh Tr·∫°ng H√∫t Thu·ªëc", "Dung T√≠ch Ph·ªïi"])

        # Boxplot
        fig1, ax1 = plt.subplots(figsize=(6, 4))
        sns.boxplot(x=plot_df["T√¨nh Tr·∫°ng H√∫t Thu·ªëc"], y=plot_df["Dung T√≠ch Ph·ªïi"], ax=ax1, palette=PALETTE[:2])
        ax1.set_xticklabels(["Kh√¥ng H√∫t Thu·ªëc", "H√∫t Thu·ªëc"])
        ax1.set_xlabel("T√¨nh Tr·∫°ng H√∫t Thu·ªëc")
        ax1.set_ylabel("Dung T√≠ch Ph·ªïi (l√≠t)")
        ax1.set_title("Dung T√≠ch Ph·ªïi theo T√¨nh Tr·∫°ng H√∫t Thu·ªëc")
        st.pyplot(fig1)

        with st.expander("Xem Nh·∫≠n X√©t Chi Ti·∫øt (Bi·ªÉu ƒë·ªì H·ªôp)"):
            st.markdown("""
            **Bi·ªÉu ƒë·ªì H·ªôp (Boxplot):**
            - So s√°nh ph√¢n b·ªë dung t√≠ch ph·ªïi gi·ªØa ng∆∞·ªùi kh√¥ng h√∫t thu·ªëc v√† ng∆∞·ªùi h√∫t thu·ªëc (sau khi lo·∫°i b·ªè gi√° tr·ªã thi·∫øu).
            - **Trung v·ªã:** ƒê∆∞·ªùng k·∫ª gi·ªØa h·ªôp cho th·∫•y dung t√≠ch ph·ªïi trung b√¨nh. Trung v·ªã th·∫•p h∆°n ·ªü nh√≥m h√∫t thu·ªëc g·ª£i √Ω ·∫£nh h∆∞·ªüng ti√™u c·ª±c.
            - **IQR:** ƒê·ªô cao c·ªßa h·ªôp th·ªÉ hi·ªán s·ª± ph√¢n t√°n. IQR l·ªõn h∆°n cho th·∫•y dung t√≠ch ph·ªïi bi·∫øn ƒë·ªông nhi·ªÅu h∆°n.
            - **R√¢u:** ƒê·ªô d√†i r√¢u cho th·∫•y ph·∫°m vi dung t√≠ch ph·ªïi (kh√¥ng t√≠nh ngo·∫°i lai).
            - **ƒêi·ªÉm ngo·∫°i lai:** C√°c ƒëi·ªÉm ngo√†i r√¢u l√† gi√° tr·ªã b·∫•t th∆∞·ªùng, c√≥ th·ªÉ ƒë√°ng ch√∫ √Ω n·∫øu t·∫≠p trung ·ªü m·ªôt nh√≥m.
            - **K·∫øt lu·∫≠n s∆° b·ªô:** H√∫t thu·ªëc c√≥ th·ªÉ l√†m gi·∫£m dung t√≠ch ph·ªïi n·∫øu trung v·ªã c·ªßa nh√≥m h√∫t thu·ªëc th·∫•p h∆°n.
            """)

        # Scatter Plot
        fig2, ax2 = plt.subplots(figsize=(8, 6))
        sns.scatterplot(x=plot_df["T√¨nh Tr·∫°ng H√∫t Thu·ªëc"].map({"Kh√¥ng": 0, "C√≥": 1}), y=plot_df["Dung T√≠ch Ph·ªïi"], 
                        data=plot_df, ax=ax2, alpha=0.3, color=PALETTE[0])
        ax2.set_xlabel("T√¨nh Tr·∫°ng H√∫t Thu·ªëc (0: Kh√¥ng H√∫t, 1: C√≥ H√∫t)")
        ax2.set_ylabel("Dung T√≠ch Ph·ªïi (l√≠t)")
        ax2.set_title("Dung T√≠ch Ph·ªïi theo T√¨nh Tr·∫°ng H√∫t Thu·ªëc")
        st.pyplot(fig2)

        with st.expander("Xem Nh·∫≠n X√©t Chi Ti·∫øt (Bi·ªÉu ƒë·ªì Ph√¢n T√°n)"):
            st.markdown("""
            **Bi·ªÉu ƒë·ªì Ph√¢n T√°n (Scatter Plot):**
            - Hi·ªÉn th·ªã dung t√≠ch ph·ªïi c·ªßa t·ª´ng b·ªánh nh√¢n theo t√¨nh tr·∫°ng h√∫t thu·ªëc (0: Kh√¥ng, 1: C√≥).
            - **M·ªói ƒëi·ªÉm:** ƒê·∫°i di·ªán cho m·ªôt b·ªánh nh√¢n.
            - **Xu h∆∞·ªõng:** Quan s√°t s·ª± kh√°c bi·ªát v·ªÅ ph√¢n b·ªë gi·ªØa hai nh√≥m.
            - **Ph√¢n t√°n:** ƒê·ªô ph√¢n t√°n c·ªßa ƒëi·ªÉm cho th·∫•y m·ª©c ƒë·ªô bi·∫øn thi√™n c·ªßa dung t√≠ch ph·ªïi trong m·ªói nh√≥m.
            - **K·∫øt h·ª£p v·ªõi Boxplot:** K·∫øt h·ª£p hai bi·ªÉu ƒë·ªì ƒë·ªÉ hi·ªÉu r√µ h∆°n v·ªÅ ·∫£nh h∆∞·ªüng c·ªßa h√∫t thu·ªëc.
            """)

        # Ki·ªÉm ƒë·ªãnh t-test th·ªß c√¥ng
        smokers = plot_df[plot_df["T√¨nh Tr·∫°ng H√∫t Thu·ªëc"] == "C√≥"]["Dung T√≠ch Ph·ªïi"]
        non_smokers = plot_df[plot_df["T√¨nh Tr·∫°ng H√∫t Thu·ªëc"] == "Kh√¥ng"]["Dung T√≠ch Ph·ªïi"]

        if len(smokers) > 0 and len(non_smokers) > 0:
            mean_smokers = np.mean(smokers)
            mean_non_smokers = np.mean(non_smokers)
            std_smokers = np.std(smokers, ddof=1)
            std_non_smokers = np.std(non_smokers, ddof=1)
            n_smokers = len(smokers)
            n_non_smokers = len(non_smokers)
            sp = np.sqrt(((n_smokers - 1) * std_smokers**2 + (n_non_smokers - 1) * std_non_smokers**2) / (n_smokers + n_non_smokers - 2))
            t_stat = (mean_smokers - mean_non_smokers) / (sp * np.sqrt(1/n_smokers + 1/n_non_smokers))
            df_ttest = n_smokers + n_non_smokers - 2

            def z_to_p(z):
                z = abs(z)
                if z > 3.7:
                    return 0.0
                p = 1 / (1 + np.exp(0.07056 * z**3 + 1.5976 * z))
                return 2 * (1 - p)

            p_value = z_to_p(t_stat)

            st.write(f"Ki·ªÉm ƒë·ªãnh t-test: t-statistic = {t_stat:.2f}, p-value = {p_value:.3f}")
            with st.expander("Gi·∫£i th√≠ch k·∫øt qu·∫£ t-test"):
                st.markdown(f"""
                - **t-statistic:** {t_stat:.2f} (ƒêo l∆∞·ªùng s·ª± kh√°c bi·ªát gi·ªØa trung b√¨nh c·ªßa hai nh√≥m).
                - **p-value:** {p_value:.3f} (X√°c su·∫•t k·∫øt qu·∫£ n·∫øu kh√¥ng c√≥ s·ª± kh√°c bi·ªát th·ª±c s·ª±).
                - **√ù nghƒ©a th·ªëng k√™:** 
                    - p < 0.05: C√≥ s·ª± kh√°c bi·ªát ƒë√°ng k·ªÉ v·ªÅ dung t√≠ch ph·ªïi gi·ªØa hai nh√≥m.
                    - p >= 0.05: Kh√¥ng ƒë·ªß b·∫±ng ch·ª©ng ƒë·ªÉ k·∫øt lu·∫≠n c√≥ s·ª± kh√°c bi·ªát.
                """)
        else:
            st.write("Kh√¥ng th·ªÉ th·ª±c hi·ªán ki·ªÉm ƒë·ªãnh t-test: M·ªôt ho·∫∑c c·∫£ hai nh√≥m kh√¥ng c√≥ d·ªØ li·ªáu.")

    # L∆∞·ª£t Kh√°m B·ªánh
    elif analysis_page == "L∆∞·ª£t Kh√°m B·ªánh":
        st.subheader("L∆∞·ª£t Kh√°m B·ªánh Trung B√¨nh theo Lo·∫°i B·ªánh")

        selected_diseases = st.multiselect("Ch·ªçn Lo·∫°i B·ªánh:", df["Lo·∫°i B·ªánh"].unique()) 
        if selected_diseases:
            # X·ª≠ l√Ω gi√° tr·ªã thi·∫øu tr∆∞·ªõc khi t√≠nh trung b√¨nh
            visits_per_disease = df[df["Lo·∫°i B·ªánh"].isin(selected_diseases)].groupby("Lo·∫°i B·ªánh")["S·ªë L∆∞·ª£t Kh√°m B·ªánh"].apply(lambda x: x.dropna().mean())
            st.bar_chart(visits_per_disease)

            with st.expander("Xem Nh·∫≠n X√©t Chi Ti·∫øt"):
                st.markdown("""
                **Bi·ªÉu ƒë·ªì C·ªôt L∆∞·ª£t Kh√°m B·ªánh Trung B√¨nh:**
                - Hi·ªÉn th·ªã s·ªë l∆∞·ª£t kh√°m b·ªánh trung b√¨nh cho c√°c lo·∫°i b·ªánh ƒë√£ ch·ªçn (sau khi lo·∫°i b·ªè gi√° tr·ªã thi·∫øu).
                - **So s√°nh:** So s√°nh chi·ªÅu cao c·ªôt gi·ªØa c√°c lo·∫°i b·ªánh.
                - **Gi√° tr·ªã c·ª• th·ªÉ:** X√°c ƒë·ªãnh lo·∫°i b·ªánh n√†o c√≥ s·ªë l∆∞·ª£t kh√°m trung b√¨nh cao nh·∫•t/th·∫•p nh·∫•t.
                - **L∆∞u √Ω:** S·ªë l∆∞·ª£t kh√°m cao c√≥ th·ªÉ do m·ª©c ƒë·ªô nghi√™m tr·ªçng c·ªßa b·ªánh ho·∫∑c y√™u c·∫ßu theo d√µi th∆∞·ªùng xuy√™n.
                - **K·∫øt h·ª£p:** K·∫øt h·ª£p v·ªõi ph√¢n t√≠ch kh√°c (v√≠ d·ª•: Lo·∫°i ƒêi·ªÅu Tr·ªã) ƒë·ªÉ hi·ªÉu r√µ h∆°n.
                """)
        else:
            st.write("Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt lo·∫°i b·ªánh.")

    # T∆∞∆°ng Quan
    elif analysis_page == "T∆∞∆°ng Quan":
        st.subheader("Bi·ªÉu ƒê·ªì T∆∞∆°ng Quan (Heatmap)")

        # M√£ h√≥a d·ªØ li·ªáu ph√¢n lo·∫°i ƒë·ªÉ t√≠nh t∆∞∆°ng quan
        encoded_data = encode_data(df)
        corr_matrix = encoded_data.corr(numeric_only=True)
        fig, ax = plt.subplots(figsize=(10, 8))
        sns.heatmap(corr_matrix, annot=True, cmap="coolwarm", fmt=".2f", linewidths=0.5, ax=ax)
        ax.set_title("T∆∞∆°ng Quan Gi·ªØa C√°c Bi·∫øn S·ªë")
        st.pyplot(fig)

        with st.expander("Xem Nh·∫≠n X√©t Chi Ti·∫øt"):
            st.markdown("""
            **Bi·ªÉu ƒë·ªì Nhi·ªát T∆∞∆°ng Quan (Heatmap):**
            - Th·ªÉ hi·ªán m·ªëi t∆∞∆°ng quan tuy·∫øn t√≠nh gi·ªØa c√°c bi·∫øn s·ªë trong d·ªØ li·ªáu.
            - **Gi·∫£i th√≠ch:**
                - G·∫ßn 1: T∆∞∆°ng quan d∆∞∆°ng m·∫°nh (khi m·ªôt bi·∫øn tƒÉng, bi·∫øn kia c≈©ng tƒÉng).
                - G·∫ßn -1: T∆∞∆°ng quan √¢m m·∫°nh (khi m·ªôt bi·∫øn tƒÉng, bi·∫øn kia gi·∫£m).
                - G·∫ßn 0: T∆∞∆°ng quan y·∫øu ho·∫∑c kh√¥ng c√≥.
            - **M√†u s·∫Øc:** ƒê·ªè (d∆∞∆°ng), Xanh (√¢m), ƒë·ªô ƒë·∫≠m th·ªÉ hi·ªán m·ª©c ƒë·ªô m·∫°nh.
            - **C·∫£nh b√°o:** T∆∞∆°ng quan kh√¥ng ph·∫£i l√† nh√¢n qu·∫£, ch·ªâ ph·∫£n √°nh m·ªëi quan h·ªá tuy·∫øn t√≠nh.
            - **C√°ch s·ª≠ d·ª•ng:** T√¨m c√°c c·∫∑p bi·∫øn c√≥ t∆∞∆°ng quan m·∫°nh (v√≠ d·ª•: Tu·ªïi v√† Dung T√≠ch Ph·ªïi, H√∫t Thu·ªëc v√† H·ªìi Ph·ª•c).
            """)
    
    elif analysis_page == "Ph√¢n T√≠ch Song Bi·∫øn (Bivariate Analysis)":        
        # Ph√¢n t√≠ch song bi·∫øn (s·ª≠ d·ª•ng d·ªØ li·ªáu g·ªëc)
        st.subheader("Ph√¢n T√≠ch Song Bi·∫øn")
        num_col = df.select_dtypes(include=['int64', 'float64']).columns.tolist()
        feature_x = st.selectbox("Ch·ªçn bi·∫øn X:", num_col)
        feature_y = st.selectbox("Ch·ªçn bi·∫øn Y:", num_col)
        plot_type = st.radio("Lo·∫°i bi·ªÉu ƒë·ªì:", ["Scatter", "2D KDE"])

        if feature_x != feature_y:
            fig, ax = plt.subplots(figsize=(10, 6))
            if plot_type == "Scatter":
                sns.scatterplot(x=df[feature_x], y=df[feature_y], hue=df["H·ªìi Ph·ª•c"], palette=PALETTE[:2], ax=ax)
            elif plot_type == "2D KDE":
                sns.kdeplot(x=df[feature_x], y=df[feature_y], cmap="Blues", fill=True, ax=ax)
            ax.set_title(f"{feature_x} vs {feature_y} ({plot_type})")
            st.pyplot(fig)
        else:
            st.warning("Vui l√≤ng ch·ªçn hai bi·∫øn kh√°c nhau cho tr·ª•c X v√† Y.")
            
        with st.expander("M·ªôt s·ªë nh·∫≠n x√©t v·ªÅ c√°c t·ªï h·ª£p song bi·∫øn"):    
            st.markdown("""
            1. **M·ªëi Quan H·ªá gi·ªØa Dung T√≠ch Ph·ªïi v√† Tu·ªïi:** Khi tu·ªïi tƒÉng, dung t√≠ch ph·ªïi c√≥ xu h∆∞·ªõng gi·∫£m.
            2. **T∆∞∆°ng Quan gi·ªØa H√∫t Thu·ªëc v√† Dung T√≠ch Ph·ªïi:** Nh·ªØng ng∆∞·ªùi h√∫t thu·ªëc c√≥ xu h∆∞·ªõng c√≥ dung t√≠ch ph·ªïi th·∫•p h∆°n.
            3. **T·ª∑ L·ªá H·ªìi Ph·ª•c v√† S·ªë L∆∞·ª£t Kh√°m B·ªánh:** Theo d√µi y t·∫ø t·ªët h∆°n gi√∫p tƒÉng c∆° h·ªôi ph·ª•c h·ªìi.
            4. **T√°c ƒê·ªông c·ªßa Lo·∫°i B·ªánh l√™n H·ªìi Ph·ª•c:** B·ªánh m√£n t√≠nh c√≥ t·ª∑ l·ªá h·ªìi ph·ª•c th·∫•p h∆°n.
            5. **·∫¢nh H∆∞·ªüng c·ªßa Lo·∫°i ƒêi·ªÅu Tr·ªã:** Ph·∫´u thu·∫≠t ho·∫∑c li·ªáu ph√°p c√≥ xu h∆∞·ªõng c√≥ t∆∞∆°ng quan t√≠ch c·ª±c v·ªõi h·ªìi ph·ª•c.
            """)

    elif analysis_page == "T·ª∑ l·ªá h·ªìi ph·ª•c":   
        # T·ª∑ l·ªá h·ªìi ph·ª•c (s·ª≠ d·ª•ng d·ªØ li·ªáu g·ªëc)
        st.subheader("Ph√¢n T√≠ch T·ª∑ l·ªá h·ªìi ph·ª•c")
        factor = st.selectbox("Ch·ªçn y·∫øu t·ªë ƒë·ªÉ so s√°nh T·ª∑ l·ªá h·ªìi ph·ª•c:", 
                            ["T√¨nh Tr·∫°ng H√∫t Thu·ªëc", "Lo·∫°i B·ªánh", "Lo·∫°i ƒêi·ªÅu Tr·ªã"])
        
        def rec_rate(data, factor):
            recovery_rate = data.groupby(factor)["H·ªìi Ph·ª•c"].value_counts(normalize=True).unstack().fillna(0)
            return recovery_rate

        recovery_data = rec_rate(df, factor)
        fig, ax = plt.subplots(figsize=(10, 6))
        recovery_data.plot(kind='bar', stacked=True, color=PALETTE[:2], ax=ax)
        for p in ax.patches:
            width, height = p.get_width(), p.get_height()
            x, y = p.get_xy() 
            ax.text(x + width/2, y + height/2, f"{height:.0%}", ha='center', va='center')
        ax.set_title(f"T·ª∑ l·ªá h·ªìi ph·ª•c theo {factor}")
        ax.set_ylabel("T·ª∑ l·ªá")
        ax.legend(title="H·ªìi Ph·ª•c", labels=["Kh√¥ng", "C√≥"])
        plt.xticks(rotation=45, ha="right")
        st.pyplot(fig)

    elif analysis_page == "Dung L∆∞·ª£ng Ph·ªïi Trung B√¨nh Theo Nh√≥m Tu·ªïi v√† Lo·∫°i B·ªánh":
        st.subheader("Dung L∆∞·ª£ng Ph·ªïi Trung B√¨nh Theo Nh√≥m Tu·ªïi v√† Lo·∫°i B·ªánh")

        df['Nh√≥m Tu·ªïi'] = pd.cut(
                df['Tu·ªïi'], 
                bins=[0, 20, 40, 60, 80, 100], 
                labels=['0-20', '21-40', '41-60', '61-80', '81+']
            )
            
        # T√≠nh trung b√¨nh dung l∆∞·ª£ng ph·ªïi cho t·ª´ng nh√≥m tu·ªïi v√† lo·∫°i b·ªánh
        lung_capacity_by_age_disease = df.groupby(['Nh√≥m Tu·ªïi', 'Lo·∫°i B·ªánh'])['Dung T√≠ch Ph·ªïi'].mean().unstack()
        
        # T·∫°o heatmap
        fig_age_lung = px.imshow(
            lung_capacity_by_age_disease, 
            title="Dung L∆∞·ª£ng Ph·ªïi Trung B√¨nh Theo Nh√≥m Tu·ªïi v√† Lo·∫°i B·ªánh",
            labels=dict(x="Lo·∫°i B·ªánh", y="Nh√≥m Tu·ªïi", color="Dung L∆∞·ª£ng Ph·ªïi"),
            color_continuous_scale="YlGnBu"  # Thang m√†u th√¢n thi·ªán v·ªõi ng∆∞·ªùi m√π m√†u
        )
        st.plotly_chart(fig_age_lung, use_container_width=True)
        
        # Nh·∫≠n x√©t v·ªÅ bi·ªÉu ƒë·ªì
        st.markdown("**Nh·∫≠n X√©t:**")
        
        # Ph√¢n t√≠ch t·ªïng quan
        overall_analysis = lung_capacity_by_age_disease.apply(lambda x: pd.Series({
            'Nh√≥m Tu·ªïi Cao Nh·∫•t': x.idxmax(),
            'Gi√° Tr·ªã Cao Nh·∫•t': x.max()
        }))
        
        for disease, analysis in overall_analysis.items():
            st.markdown(f"- {disease}: Dung l∆∞·ª£ng ph·ªïi cao nh·∫•t ·ªü nh√≥m tu·ªïi {analysis['Nh√≥m Tu·ªïi Cao Nh·∫•t']} v·ªõi gi√° tr·ªã {analysis['Gi√° Tr·ªã Cao Nh·∫•t']:.2f}")

# --- Trang 4: Nh·∫≠n X√©t Chung ---
elif page == "4. Nh·∫≠n X√©t Chung":
    st.header("4. Nh·∫≠n X√©t Chung")
    avg_age = df["Tu·ªïi"].mean()
    smoking_rate = (df["T√¨nh Tr·∫°ng H√∫t Thu·ªëc"] == "C√≥").mean() * 100
    avg_hospital_visits = df["S·ªë L∆∞·ª£t Kh√°m B·ªánh"].mean()
    male_percentage = (df["Gi·ªõi T√≠nh"] == "Nam").mean() * 100
    female_percentage = (df["Gi·ªõi T√≠nh"] == "N·ªØ").mean() * 100

    st.markdown(f"""
    - **T·ªïng Quan v·ªÅ D·ªØ Li·ªáu v√† K·∫øt Qu·∫£ Ph√¢n T√≠ch:**
        - **M·ªëi T∆∞∆°ng Quan gi·ªØa H√∫t Thu·ªëc v√† Dung T√≠ch Ph·ªïi:** D·ªØ li·ªáu cho th·∫•y nh·ªØng b·ªánh nh√¢n h√∫t thu·ªëc c√≥ xu h∆∞·ªõng c√≥ dung t√≠ch ph·ªïi th·∫•p h∆°n (xem boxplot).
        - **Ph·ªï Bi·∫øn c·ªßa B·ªánh:** C√°c lo·∫°i b·ªánh ph·ªïi ph·ªï bi·∫øn nh·∫•t trong t·∫≠p d·ªØ li·ªáu c·∫ßn ƒë∆∞·ª£c x√°c ƒë·ªãnh t·ª´ bi·ªÉu ƒë·ªì ph√¢n b·ªë lo·∫°i b·ªánh.
        - **Tu·ªïi Trung B√¨nh c·ªßa B·ªánh Nh√¢n:** {avg_age:.2f} tu·ªïi.
        - **T·ª∑ L·ªá H√∫t Thu·ªëc:** {smoking_rate:.2f}%.
        - **S·ªë L∆∞·ª£t Kh√°m B·ªánh:** Trung b√¨nh {avg_hospital_visits:.2f} l∆∞·ª£t.
        - **Gi·ªõi T√≠nh:** Nam: {male_percentage:.2f}%, N·ªØ: {female_percentage:.2f}%.
    """)

    st.subheader("H·∫°n Ch·∫ø")
    st.markdown("""
    - **K√≠ch Th∆∞·ªõc M·∫´u:** K√≠ch th∆∞·ªõc m·∫´u c√≥ th·ªÉ kh√¥ng ƒë·ªß l·ªõn ƒë·ªÉ ƒë∆∞a ra k·∫øt lu·∫≠n ch·∫Øc ch·∫Øn.
    - **Thi·∫øu S√≥t D·ªØ Li·ªáu:** M·ªôt s·ªë h√†ng c√≥ th·ªÉ thi·∫øu gi√° tr·ªã (n·∫øu c√≥).
    - **ƒê∆°n V·ªã ƒêo:** Dung t√≠ch ph·ªïi ƒë∆∞·ª£c ƒëo b·∫±ng l√≠t, kh√¥ng chu·∫©n h√≥a.
    """)