import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objs as go
import numpy as np

# C·∫•u h√¨nh trang
st.set_page_config(page_title="Ph√¢n T√≠ch B·ªánh Ph·ªïi", page_icon="ü´Å", layout="wide")

# H√†m t·∫£i d·ªØ li·ªáu
@st.cache_data
def load_data():
    return pd.read_csv('lung_disease_data_cleaned.csv')

# B·∫£ng m√†u th√¢n thi·ªán v·ªõi ng∆∞·ªùi m√π m√†u
COLOR_PALETTE = [
    '#1F77B4',  # Xanh d∆∞∆°ng
    '#FF7F0E',  # Cam
    '#2CA02C',  # Xanh l√°
    '#D62728',  # ƒê·ªè
    '#9467BD',  # T√≠m
    '#8C564B',  # N√¢u
    '#E377C2',  # H·ªìng
    '#7F7F7F',  # X√°m
]

# H√†m ch√≠nh t·∫°o b·∫£ng ƒëi·ªÅu khi·ªÉn
def main():
    # Ti√™u ƒë·ªÅ v√† gi·ªõi thi·ªáu
    st.title("ü´Å B·∫£ng Ph√¢n T√≠ch D·ªØ Li·ªáu B·ªánh Ph·ªïi")
    st.write("Ph√¢n t√≠ch to√†n di·ªán v·ªÅ d·ªØ li·ªáu b·ªánh nh√¢n b·ªánh ph·ªïi")

    # T·∫£i d·ªØ li·ªáu
    df = load_data()

    # Thanh b√™n ƒë·ªÉ l·ªçc
    st.sidebar.header("üîç B·ªô L·ªçc")
    
    # L·ªçc theo Gi·ªõi T√≠nh
    gender_filter = st.sidebar.multiselect(
        "Ch·ªçn Gi·ªõi T√≠nh",
        options=df['Gi·ªõi T√≠nh'].unique(),
        default=df['Gi·ªõi T√≠nh'].unique()
    )

    # L·ªçc theo T√¨nh Tr·∫°ng H√∫t Thu·ªëc
    smoking_statuses = df['T√¨nh Tr·∫°ng H√∫t Thu·ªëc'].unique()
    
    # Ki·ªÉm tra n·∫øu c√≥ d·ªØ li·ªáu v·ªÅ h√∫t thu·ªëc
    if len(smoking_statuses) > 0:
        smoking_filter = st.sidebar.multiselect(
            "Ch·ªçn T√¨nh Tr·∫°ng H√∫t Thu·ªëc",
            options=smoking_statuses,
            default=smoking_statuses
        )
    else:
        # N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu v·ªÅ h√∫t thu·ªëc, b·ªè qua b·ªô l·ªçc n√†y
        smoking_filter = smoking_statuses

    # L·ªçc theo Lo·∫°i B·ªánh
    disease_filter = st.sidebar.multiselect(
        "Ch·ªçn Lo·∫°i B·ªánh",
        options=df['Lo·∫°i B·ªánh'].unique(),
        default=df['Lo·∫°i B·ªánh'].unique()
    )

    # √Åp d·ª•ng b·ªô l·ªçc
    filtered_df = df[
        (df['Gi·ªõi T√≠nh'].isin(gender_filter)) & 
        (len(smoking_filter) == 0 or df['T√¨nh Tr·∫°ng H√∫t Thu·ªëc'].isin(smoking_filter)) & 
        (df['Lo·∫°i B·ªánh'].isin(disease_filter))
    ]

    # Th√™m th√¥ng b√°o n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu v·ªÅ h√∫t thu·ªëc
    if len(smoking_statuses) == 0:
        st.warning("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu v·ªÅ t√¨nh tr·∫°ng h√∫t thu·ªëc trong t·∫≠p d·ªØ li·ªáu.")

    # T·∫°o c√°c tab
    tab1, tab2, tab3, tab4 = st.tabs([
        "üìä T·ªïng Quan", 
        "üåà Ph√¢n B·ªï B·ªánh", 
        "üìà Ph√¢n T√≠ch Dung L∆∞·ª£ng Ph·ªïi", 
        "üè• K·∫øt Qu·∫£ ƒêi·ªÅu Tr·ªã"
    ])

    with tab1:
        # C√°c ch·ªâ s·ªë T·ªïng Quan
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            total_patients = len(filtered_df)
            st.metric("T·ªïng S·ªë B·ªánh Nh√¢n", total_patients)
            st.caption(f"Chi·∫øm {total_patients/len(df)*100:.2f}% t·ªïng s·ªë b·ªánh nh√¢n")
        
        with col2:
            recovery_rate = filtered_df['Ph·ª•c H·ªìi'].value_counts(normalize=True).get('C√≥', 0)*100
            st.metric("T·ª∑ L·ªá Ph·ª•c H·ªìi", f"{recovery_rate:.2f}%")
            st.caption("T·ª∑ l·ªá b·ªánh nh√¢n ƒë∆∞·ª£c ƒëi·ªÅu tr·ªã th√†nh c√¥ng")
        
        with col3:
            avg_hospital_visits = filtered_df['S·ªë L·∫ßn Kh√°m'].mean()
            st.metric("Trung B√¨nh L·∫ßn Kh√°m", f"{avg_hospital_visits:.2f}")
            st.caption("S·ªë l·∫ßn kh√°m trung b√¨nh c·ªßa b·ªánh nh√¢n")
        
        with col4:
            avg_age = filtered_df['Tu·ªïi'].mean()
            st.metric("Tu·ªïi Trung B√¨nh", f"{avg_age:.2f}")
            st.caption("Tu·ªïi trung b√¨nh c·ªßa nh√≥m b·ªánh nh√¢n")

    with tab2:
        # Ph√¢n B·ªï B·ªánh
        col1, col2 = st.columns(2)
        
        with col1:
            # Bi·ªÉu ƒë·ªì tr√≤n v·ªÅ Lo·∫°i B·ªánh
            disease_counts = filtered_df['Lo·∫°i B·ªánh'].value_counts()
            fig_disease = px.pie(
                disease_counts, 
                values=disease_counts.values, 
                names=disease_counts.index, 
                title="Ph√¢n B·ªï C√°c Lo·∫°i B·ªánh Ph·ªïi",
                color_discrete_sequence=COLOR_PALETTE
            )
            st.plotly_chart(fig_disease, use_container_width=True)
            
            # Nh·∫≠n x√©t v·ªÅ bi·ªÉu ƒë·ªì
            st.markdown("**Nh·∫≠n X√©t:**")
            for disease, count in disease_counts.items():
                percentage = count / len(filtered_df) * 100
                st.markdown(f"- {disease}: {count} b·ªánh nh√¢n ({percentage:.2f}%)")
        
        with col2:
            # Ki·ªÉm tra xem c√≥ d·ªØ li·ªáu v·ªÅ t√¨nh tr·∫°ng h√∫t thu·ªëc kh√¥ng
            smoking_statuses = df['T√¨nh Tr·∫°ng H√∫t Thu·ªëc'].unique()
            
            if len(smoking_statuses) > 0:
                # Bi·ªÉu ƒë·ªì c·ªôt v·ªÅ Lo·∫°i B·ªánh theo T√¨nh Tr·∫°ng H√∫t Thu·ªëc
                disease_smoking = filtered_df.groupby(['Lo·∫°i B·ªánh', 'T√¨nh Tr·∫°ng H√∫t Thu·ªëc']).size().unstack(fill_value=0)
                fig_disease_smoking = px.bar(
                    disease_smoking, 
                    title="C√°c B·ªánh Ph·ªïi Theo T√¨nh Tr·∫°ng H√∫t Thu·ªëc",
                    labels={'value': 'S·ªë B·ªánh Nh√¢n', 'T√¨nh Tr·∫°ng H√∫t Thu·ªëc': 'T√¨nh Tr·∫°ng H√∫t Thu·ªëc'},
                    color_discrete_sequence=COLOR_PALETTE
                )
                st.plotly_chart(fig_disease_smoking, use_container_width=True)
                
                # Nh·∫≠n x√©t v·ªÅ bi·ªÉu ƒë·ªì
                st.markdown("**Nh·∫≠n X√©t:**")
                for disease in disease_smoking.index:
                    status_details = []
                    total_for_disease = disease_smoking.loc[disease].sum()
                    
                    for status in disease_smoking.columns:
                        count = disease_smoking.loc[disease, status]
                        percent = count / total_for_disease * 100
                        status_details.append(f"{status}: {count} ng∆∞·ªùi ({percent:.2f}%)")
                    
                    st.markdown(f"- {disease}: " + ", ".join(status_details))
            else:
                st.info("üí° Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã v·ªÅ t√¨nh tr·∫°ng h√∫t thu·ªëc.")

    with tab3:
        # Ph√¢n T√≠ch Dung L∆∞·ª£ng Ph·ªïi
        col1, col2 = st.columns(2)
        
        with col1:
            # Bi·ªÉu ƒë·ªì h·ªôp v·ªÅ Dung L∆∞·ª£ng Ph·ªïi theo Lo·∫°i B·ªánh
            fig_lung_capacity = px.box(
                filtered_df, 
                x='Lo·∫°i B·ªánh', 
                y='Dung L∆∞·ª£ng Ph·ªïi', 
                title="Ph√¢n B·ªë Dung L∆∞·ª£ng Ph·ªïi Theo Lo·∫°i B·ªánh",
                color='Lo·∫°i B·ªánh',
                color_discrete_sequence=COLOR_PALETTE
            )
            st.plotly_chart(fig_lung_capacity, use_container_width=True)
            
            # Nh·∫≠n x√©t v·ªÅ bi·ªÉu ƒë·ªì
            st.markdown("**Nh·∫≠n X√©t:**")
            for disease in filtered_df['Lo·∫°i B·ªánh'].unique():
                disease_data = filtered_df[filtered_df['Lo·∫°i B·ªánh'] == disease]['Dung L∆∞·ª£ng Ph·ªïi']
                st.markdown(f"- {disease}: Trung b√¨nh {disease_data.mean():.2f}, Dao ƒë·ªông t·ª´ {disease_data.min():.2f} ƒë·∫øn {disease_data.max():.2f}")
        
        with col2:
            # Bi·ªÉu ƒë·ªì heatmap c·ªßa Tu·ªïi v√† Dung L∆∞·ª£ng Ph·ªïi
            # Chia tu·ªïi v√† dung l∆∞·ª£ng ph·ªïi th√†nh c√°c nh√≥m
            filtered_df['Nh√≥m Tu·ªïi'] = pd.cut(
                filtered_df['Tu·ªïi'], 
                bins=[0, 20, 40, 60, 80, 100], 
                labels=['0-20', '21-40', '41-60', '61-80', '81+']
            )
            
            # T√≠nh trung b√¨nh dung l∆∞·ª£ng ph·ªïi cho t·ª´ng nh√≥m tu·ªïi v√† lo·∫°i b·ªánh
            lung_capacity_by_age_disease = filtered_df.groupby(['Nh√≥m Tu·ªïi', 'Lo·∫°i B·ªánh'])['Dung L∆∞·ª£ng Ph·ªïi'].mean().unstack()
            
            # T·∫°o heatmap
            fig_age_lung = px.imshow(
                lung_capacity_by_age_disease, 
                title="Dung L∆∞·ª£ng Ph·ªïi Trung B√¨nh Theo Nh√≥m Tu·ªïi v√† Lo·∫°i B·ªánh",
                labels=dict(x="Lo·∫°i B·ªánh", y="Nh√≥m Tu·ªïi", color="Dung L∆∞·ª£ng Ph·ªïi"),
                color_continuous_scale="YlGnBu"  # Thang m√†u th√¢n thi·ªán v·ªõi ng∆∞·ªùi m√π m√†u
            )
            st.plotly_chart(fig_age_lung, use_container_width=True)
            
            # Nh·∫≠n x√©t v·ªÅ bi·ªÉu ƒë·ªì
            st.markdown("**Nh·∫≠n X√©t:**")
            
            # Ph√¢n t√≠ch t·ªïng quan
            overall_analysis = lung_capacity_by_age_disease.apply(lambda x: pd.Series({
                'Nh√≥m Tu·ªïi Cao Nh·∫•t': x.idxmax(),
                'Gi√° Tr·ªã Cao Nh·∫•t': x.max()
            }))
            
            for disease, analysis in overall_analysis.items():
                st.markdown(f"- {disease}: Dung l∆∞·ª£ng ph·ªïi cao nh·∫•t ·ªü nh√≥m tu·ªïi {analysis['Nh√≥m Tu·ªïi Cao Nh·∫•t']} v·ªõi gi√° tr·ªã {analysis['Gi√° Tr·ªã Cao Nh·∫•t']:.2f}")
            

    with tab4:
        # K·∫øt Qu·∫£ ƒêi·ªÅu Tr·ªã
        col1, col2 = st.columns(2)
        
        with col1:
            # T·ª∑ l·ªá ph·ª•c h·ªìi theo Lo·∫°i ƒêi·ªÅu Tr·ªã
            treatment_recovery = filtered_df.groupby(['Lo·∫°i ƒêi·ªÅu Tr·ªã', 'Ph·ª•c H·ªìi']).size().unstack(fill_value=0)
            treatment_recovery_pct = treatment_recovery.div(treatment_recovery.sum(axis=1), axis=0) * 100
            
            fig_treatment_recovery = px.bar(
                treatment_recovery_pct, 
                title="T·ª∑ L·ªá Ph·ª•c H·ªìi Theo Lo·∫°i ƒêi·ªÅu Tr·ªã",
                labels={'value': 'Ph·∫ßn TrƒÉm', 'Ph·ª•c H·ªìi': 'Tr·∫°ng Th√°i Ph·ª•c H·ªìi'},
                color_discrete_sequence=COLOR_PALETTE
            )
            st.plotly_chart(fig_treatment_recovery, use_container_width=True)
            
            # Nh·∫≠n x√©t v·ªÅ bi·ªÉu ƒë·ªì
            st.markdown("**Nh·∫≠n X√©t:**")
            for treatment in treatment_recovery_pct.index:
                recovery_rate = treatment_recovery_pct.loc[treatment, 'C√≥']
                st.markdown(f"- {treatment}: T·ª∑ l·ªá ph·ª•c h·ªìi {recovery_rate:.2f}%")
        
        with col2:
            # S·ªë l·∫ßn kh√°m b·ªánh theo Tr·∫°ng Th√°i Ph·ª•c H·ªìi
            fig_visits_recovery = px.box(
                filtered_df, 
                x='Ph·ª•c H·ªìi', 
                y='S·ªë L·∫ßn Kh√°m', 
                title="S·ªë L·∫ßn Kh√°m B·ªánh Theo Tr·∫°ng Th√°i Ph·ª•c H·ªìi",
                color='Ph·ª•c H·ªìi',
                color_discrete_sequence=[COLOR_PALETTE[2], COLOR_PALETTE[3]]
            )
            st.plotly_chart(fig_visits_recovery, use_container_width=True)
            
            # Nh·∫≠n x√©t v·ªÅ bi·ªÉu ƒë·ªì
            recovered_visits = filtered_df[filtered_df['Ph·ª•c H·ªìi'] == 'C√≥']['S·ªë L·∫ßn Kh√°m']
            not_recovered_visits = filtered_df[filtered_df['Ph·ª•c H·ªìi'] == 'Kh√¥ng']['S·ªë L·∫ßn Kh√°m']
            
            st.markdown("**Nh·∫≠n X√©t:**")
            st.markdown(f"- B·ªánh nh√¢n kh·ªèi b·ªánh: Trung b√¨nh {recovered_visits.mean():.2f} l·∫ßn kh√°m")
            st.markdown(f"- B·ªánh nh√¢n ch∆∞a kh·ªèi: Trung b√¨nh {not_recovered_visits.mean():.2f} l·∫ßn kh√°m")

    # Tr√¨nh xem d·ªØ li·ªáu th√¥
    if st.checkbox("Xem D·ªØ Li·ªáu G·ªëc"):
        st.dataframe(filtered_df)

# Ch·∫°y ·ª©ng d·ª•ng
if __name__ == "__main__":
    main()

# Y√™u c·∫ßu (t∆∞∆°ng ƒë∆∞∆°ng requirements.txt):
# streamlit
# pandas
# plotly