import streamlit as st
import pandas as pd
import plotly.express as px
import numpy as np

# C·∫•u h√¨nh trang
st.set_page_config(page_title="Ph√¢n T√≠ch B·ªánh Ph·ªïi", page_icon="ü´Å", layout="wide")

# B·∫£ng m√†u th√¢n thi·ªán v·ªõi ng∆∞·ªùi m√π m√†u
COLOR_PALETTE =  [
    '#1F77B4',  # Xanh d∆∞∆°ng
    '#FF7F0E',  # Cam
    '#2CA02C',  # Xanh l√°
    '#D62728',  # ƒê·ªè
    '#9467BD',  # T√≠m
    '#8C564B',  # N√¢u
    '#E377C2',  # H·ªìng
    '#7F7F7F'   # X√°m
]

# H√†m t·∫£i d·ªØ li·ªáu
@st.cache_data
def load_data():
    try:
        data = pd.read_csv('lung_disease_data_preprocessed.csv')
        return data
    except FileNotFoundError:
        st.error("Kh√¥ng t√¨m th·∫•y file lung_disease_data_preprocessed.csv trong th∆∞ m·ª•c Data. H√£y ƒë·∫£m b·∫£o b·∫°n ƒë√£ ch·∫°y code ti·ªÅn x·ª≠ l√Ω tr∆∞·ªõc.")
        st.stop()

# H√†m ch√≠nh t·∫°o b·∫£ng ƒëi·ªÅu khi·ªÉn
def main():
    # Ti√™u ƒë·ªÅ v√† gi·ªõi thi·ªáu
    st.title("ü´Å Dashboard B·ªánh Ph·ªïi")
    st.write("Ph√¢n t√≠ch to√†n di·ªán v·ªÅ d·ªØ li·ªáu b·ªánh nh√¢n b·ªánh ph·ªïi")

    # T·∫£i d·ªØ li·ªáu
    df = load_data()

    # ƒê·ªïi t√™n c·ªôt (t·ª´ ti·∫øng Anh sang ti·∫øng Vi·ªát cho tr·ª±c quan)
    df = df.rename(columns={
        'Age': 'Tu·ªïi',
        'Lung Capacity': 'Dung L∆∞·ª£ng Ph·ªïi',
        'Hospital Visits': 'S·ªë L·∫ßn Kh√°m',
        'Recovered': 'Ph·ª•c H·ªìi'
    })

    # Sidebar ƒë·ªÉ l·ªçc
    st.sidebar.header("üîç B·ªô L·ªçc")

    # L·ªçc theo Gi·ªõi T√≠nh
    gender_options = [col.replace('Gender_', '') for col in df.columns if 'Gender_' in col]
    gender_filter = st.sidebar.multiselect(
        "Ch·ªçn Gi·ªõi T√≠nh",
        options=gender_options,
        default=gender_options
    )

    # L·ªçc theo T√¨nh Tr·∫°ng H√∫t Thu·ªëc
    smoking_options = [col.replace('Smoking Status_', '') for col in df.columns if 'Smoking Status_' in col]
    smoking_filter = st.sidebar.multiselect(
        "Ch·ªçn T√¨nh Tr·∫°ng H√∫t Thu·ªëc",
        options=smoking_options,
        default=smoking_options
    )

    # L·ªçc theo Lo·∫°i B·ªánh
    disease_options = [col.replace('Disease Type_', '') for col in df.columns if 'Disease Type_' in col]
    disease_filter = st.sidebar.multiselect(
        "Ch·ªçn Lo·∫°i B·ªánh",
        options=disease_options,
        default=disease_options
    )

    # L·ªçc theo Lo·∫°i ƒêi·ªÅu Tr·ªã
    treatment_options = [col.replace('Treatment Type_', '') for col in df.columns if 'Treatment Type_' in col]
    treatment_filter = st.sidebar.multiselect(
        "Ch·ªçn Lo·∫°i ƒêi·ªÅu Tr·ªã",
        options=treatment_options,
        default=treatment_options
    )

    # √Åp d·ª•ng b·ªô l·ªçc
    def filter_data(df, gender, smoking, disease, treatment):
        filtered_df = df.copy()

        def safe_filter(df, col_prefix, selected_options):
            valid_cols = [col for col in df.columns if col.startswith(col_prefix) and col.split('_')[-1] in selected_options]
            if valid_cols:
                return df[valid_cols].any(axis=1)
            return pd.Series([True] * len(df), index=df.index)

        gender_filter_series = safe_filter(filtered_df, "Gender_", gender)
        smoking_filter_series = safe_filter(filtered_df, "Smoking Status_", smoking)
        disease_filter_series = safe_filter(filtered_df, "Disease Type_", disease)
        treatment_filter_series = safe_filter(filtered_df, "Treatment Type_", treatment)

        combined_filter = gender_filter_series & smoking_filter_series & disease_filter_series & treatment_filter_series
        return filtered_df[combined_filter]

    filtered_df = filter_data(df, gender_filter, smoking_filter, disease_filter, treatment_filter)

    # Th√™m th√¥ng b√°o n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu
    if len(filtered_df) == 0:
        st.warning("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu n√†o kh·ªõp v·ªõi b·ªô l·ªçc ƒë√£ ch·ªçn.")
        st.stop()

    # C√°c tab
    tab1, tab2, tab3, tab4 = st.tabs([
        "üìä T·ªïng Quan",
        "üåà Ph√¢n B·ªï B·ªánh",
        "üìà Ph√¢n T√≠ch Dung L∆∞·ª£ng Ph·ªïi",
        "üè• K·∫øt Qu·∫£ ƒêi·ªÅu Tr·ªã"
    ])

    with tab1:
        # C√°c ch·ªâ s·ªë T·ªïng Quan
        col1, col2, col3, col4 = st.columns(4)

        with col1:
            total_patients = len(filtered_df)
            st.metric("T·ªïng S·ªë B·ªánh Nh√¢n", total_patients)
            st.caption(f"Chi·∫øm {total_patients/len(df)*100:.2f}% t·ªïng s·ªë b·ªánh nh√¢n")

        with col2:
            recovery_rate = filtered_df['Ph·ª•c H·ªìi'].value_counts(normalize=True).get(1, 0)*100
            st.metric("T·ª∑ L·ªá Ph·ª•c H·ªìi", f"{recovery_rate:.2f}%")
            st.caption("T·ª∑ l·ªá b·ªánh nh√¢n ƒë∆∞·ª£c ƒëi·ªÅu tr·ªã th√†nh c√¥ng")

        with col3:
            avg_hospital_visits = filtered_df['S·ªë L·∫ßn Kh√°m'].mean()
            st.metric("Trung B√¨nh L·∫ßn Kh√°m", f"{avg_hospital_visits:.2f}")
            st.caption("S·ªë l·∫ßn kh√°m trung b√¨nh c·ªßa b·ªánh nh√¢n")

        with col4:
            avg_age = filtered_df['Tu·ªïi'].mean()
            st.metric("Tu·ªïi Trung B√¨nh", f"{avg_age:.2f}")
            st.caption("Tu·ªïi trung b√¨nh c·ªßa nh√≥m b·ªánh nh√¢n")

    with tab2:
        # Ph√¢n B·ªï B·ªánh
        col1, col2 = st.columns(2)

        with col1:
            # Bi·ªÉu ƒë·ªì tr√≤n v·ªÅ Lo·∫°i B·ªánh
            disease_cols = [col for col in filtered_df.columns if 'Disease Type_' in col]
            disease_names = [col.replace('Disease Type_', '') for col in disease_cols]
            disease_counts = filtered_df[disease_cols].sum()
            fig_disease = px.pie(
                names=disease_names,
                values=disease_counts.values,
                title="Ph√¢n B·ªï C√°c Lo·∫°i B·ªánh Ph·ªïi",
                color_discrete_sequence=COLOR_PALETTE
            )
            st.plotly_chart(fig_disease, use_container_width=True)

            # Nh·∫≠n x√©t v·ªÅ bi·ªÉu ƒë·ªì
            st.markdown("**Nh·∫≠n X√©t:**")
            for disease, count in zip(disease_names, disease_counts):
                percentage = count / len(filtered_df) * 100
                st.markdown(f"- {disease}: {count} b·ªánh nh√¢n ({percentage:.2f}%)")

        with col2:
            # T·ª∑ l·ªá h√∫t thu·ªëc theo b·ªánh
            smoking_cols = [col for col in filtered_df.columns if 'Smoking Status_' in col]
            smoking_names = [col.replace('Smoking Status_', '') for col in smoking_cols]

            if smoking_cols:
                # T·∫°o DataFrame m·ªõi v·ªõi t·ªïng s·ªë b·ªánh nh√¢n theo t·ª´ng t√¨nh tr·∫°ng h√∫t thu·ªëc cho m·ªói lo·∫°i b·ªánh
                smoking_by_disease = filtered_df[[col for col in filtered_df.columns if 'Disease Type_' in col] + [col for col in filtered_df.columns if 'Smoking Status_' in col]].groupby([col for col in filtered_df.columns if 'Disease Type_' in col]).sum()
                smoking_by_disease.columns = [col.replace('Smoking Status_', '') for col in smoking_by_disease.columns]
                fig_smoking = px.imshow(smoking_by_disease.T,
                                title="M·ªëi quan h·ªá gi·ªØa T√¨nh Tr·∫°ng H√∫t Thu·ªëc v√† Lo·∫°i B·ªánh",
                                labels=dict(x="Lo·∫°i B·ªánh", y="T√¨nh Tr·∫°ng H√∫t Thu·ªëc"),
                                color_continuous_scale="RdBu")
                st.plotly_chart(fig_smoking, use_container_width=True)
                st.markdown("**Nh·∫≠n X√©t:**")
            else:
                st.info("üí° Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã v·ªÅ t√¨nh tr·∫°ng h√∫t thu·ªëc.")

    with tab3:
    # Ph√¢n T√≠ch Dung L∆∞·ª£ng Ph·ªïi
        col1, col2 = st.columns(2)

        with col1:
            # Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì boxplot
            filtered_df_no_na = filtered_df.dropna(subset=['Dung L∆∞·ª£ng Ph·ªïi'])
            disease_cols = [col for col in filtered_df_no_na.columns if 'Disease Type_' in col]
            disease_names = [col.replace('Disease Type_', '') for col in disease_cols]

            # T·∫°o danh s√°ch ƒë·ªÉ l∆∞u d·ªØ li·ªáu
            data_for_boxplot = []
            for disease_col, disease_name in zip(disease_cols, disease_names):
                data_for_boxplot.extend([(disease_name, lung_capacity) for lung_capacity in filtered_df_no_na[filtered_df_no_na[disease_col] == 1]['Dung L∆∞·ª£ng Ph·ªïi']])
            df_boxplot = pd.DataFrame(data_for_boxplot, columns=['Lo·∫°i b·ªánh', 'Dung L∆∞·ª£ng Ph·ªïi'])

            fig_lung_capacity = px.box(
                df_boxplot,
                x='Lo·∫°i b·ªánh',
                y='Dung L∆∞·ª£ng Ph·ªïi',
                title="Ph√¢n B·ªë Dung L∆∞·ª£ng Ph·ªïi Theo Lo·∫°i B·ªánh",
                color='Lo·∫°i b·ªánh',
                color_discrete_sequence=COLOR_PALETTE
            )
            st.plotly_chart(fig_lung_capacity, use_container_width=True)

            # Nh·∫≠n x√©t v·ªÅ bi·ªÉu ƒë·ªì
            st.markdown("**Nh·∫≠n X√©t:**")
            for disease in disease_names:
                disease_data = df_boxplot[df_boxplot['Lo·∫°i b·ªánh'] == disease]['Dung L∆∞·ª£ng Ph·ªïi']
                if not disease_data.empty:
                    st.markdown(f"- {disease}: Trung b√¨nh {disease_data.mean():.2f}, Dao ƒë·ªông t·ª´ {disease_data.min():.2f} ƒë·∫øn {disease_data.max():.2f}")
                else:
                    st.markdown(f"- Kh√¥ng c√≥ d·ªØ li·ªáu cho b·ªánh {disease}")
        with col2:
            # Bi·ªÉu ƒë·ªì heatmap c·ªßa Tu·ªïi v√† Dung L∆∞·ª£ng Ph·ªïi
            # Chia tu·ªïi v√† dung l∆∞·ª£ng ph·ªïi th√†nh c√°c nh√≥m
            bins = [0, 20, 40, 60, 80, 100]
            labels = ['0-20', '21-40', '41-60', '61-80', '81+']

            # T·∫°o c·ªôt Nh√≥m Tu·ªïi
            if 'Nh√≥m Tu·ªïi' in filtered_df.columns:
                filtered_df.drop(columns=['Nh√≥m Tu·ªïi'], inplace=True)
            filtered_df['Nh√≥m Tu·ªïi'] = pd.cut(filtered_df['Tu·ªïi'], bins=bins, labels=labels)

            # T√≠nh trung b√¨nh dung l∆∞·ª£ng ph·ªïi cho t·ª´ng nh√≥m tu·ªïi v√† lo·∫°i b·ªánh
            lung_capacity_by_age_disease = filtered_df.groupby(['Nh√≥m Tu·ªïi'])['Dung L∆∞·ª£ng Ph·ªïi'].mean()

            # T·∫°o c·ªôt Nh√≥m Tu·ªïi
            fig_age_lung = px.bar(lung_capacity_by_age_disease,
                title="Dung L∆∞·ª£ng Ph·ªïi Trung B√¨nh Theo Nh√≥m Tu·ªïi",
                labels=dict(value="Dung L∆∞·ª£ng Ph·ªïi", index="Nh√≥m Tu·ªïi", color="Nh√≥m Tu·ªïi"),
                color = lung_capacity_by_age_disease.index, # ƒê·∫∑t m√†u theo t√™n nh√≥m tu·ªïi
                color_discrete_sequence=px.colors.sequential.YlGnBu
            )
            st.plotly_chart(fig_age_lung, use_container_width=True)

            # Nh·∫≠n x√©t v·ªÅ bi·ªÉu ƒë·ªì
            st.markdown("**Nh·∫≠n X√©t:**")

            overall_analysis = pd.Series({
                'Nh√≥m Tu·ªïi Cao Nh·∫•t': lung_capacity_by_age_disease.idxmax(),
                'Gi√° Tr·ªã Cao Nh·∫•t': lung_capacity_by_age_disease.max()
            })
            st.markdown(f"- Dung l∆∞·ª£ng ph·ªïi cao nh·∫•t ·ªü nh√≥m tu·ªïi {overall_analysis['Nh√≥m Tu·ªïi Cao Nh·∫•t']} v·ªõi gi√° tr·ªã {overall_analysis['Gi√° Tr·ªã Cao Nh·∫•t']:.2f}")

    with tab4:
        # K·∫øt Qu·∫£ ƒêi·ªÅu Tr·ªã
        col1, col2 = st.columns(2)

        with col1:
            # T·ª∑ l·ªá ph·ª•c h·ªìi theo Lo·∫°i ƒêi·ªÅu Tr·ªã
            treatment_cols = [col for col in filtered_df.columns if 'Treatment Type_' in col]
            if treatment_cols:
                treatment_recovery_data = {}
                treatment_names = [col.replace('Treatment Type_', '') for col in treatment_cols]

                for treatment in treatment_names:
                    treatment_recovery_data[treatment] = {'Ph·ª•c H·ªìi': len(filtered_df[(filtered_df[f"Treatment Type_{treatment}"] == 1) & (filtered_df["Ph·ª•c H·ªìi"] == 1)]),
                                                            'Kh√¥ng': len(filtered_df[(filtered_df[f"Treatment Type_{treatment}"] == 1) & (filtered_df["Ph·ª•c H·ªìi"] == 0)])
                                                            }

                treatment_recovery = pd.DataFrame(treatment_recovery_data).T
                #Check nan and fillna(0)
                treatment_recovery = treatment_recovery.fillna(0)
                treatment_recovery_pct = treatment_recovery.div(treatment_recovery.sum(axis=1), axis=0) * 100
                treatment_recovery_pct = treatment_recovery_pct.fillna(0) # Sau khi div c√≥ th·ªÉ c√≥ nan v√¨ chia 0
                fig_treatment_recovery = px.bar(
                    treatment_recovery_pct,
                    title="T·ª∑ L·ªá Ph·ª•c H·ªìi Theo Lo·∫°i ƒêi·ªÅu Tr·ªã",
                    labels={'value': 'Ph·∫ßn TrƒÉm', 'variable': 'Tr·∫°ng Th√°i Ph·ª•c H·ªìi'},
                    color_discrete_sequence=COLOR_PALETTE
                )
                st.plotly_chart(fig_treatment_recovery, use_container_width=True)

                # Nh·∫≠n x√©t v·ªÅ bi·ªÉu ƒë·ªì
                st.markdown("**Nh·∫≠n X√©t:**")
                for treatment in treatment_recovery_pct.index:
                    if 'Ph·ª•c H·ªìi' in treatment_recovery_pct.columns:
                        recovery_rate = treatment_recovery_pct.loc[treatment, 'Ph·ª•c H·ªìi']
                    else:
                        recovery_rate = 0
                    st.markdown(f"- {treatment}: T·ª∑ l·ªá ph·ª•c h·ªìi {recovery_rate:.2f}%")
            else:
                st.info("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu v·ªÅ lo·∫°i ƒëi·ªÅu tr·ªã.")

        with col2:
            # S·ªë l·∫ßn kh√°m b·ªánh theo Tr·∫°ng Th√°i Ph·ª•c H·ªìi
            fig_visits_recovery = px.box(
                filtered_df,
                x='Ph·ª•c H·ªìi',
                y='S·ªë L·∫ßn Kh√°m',
                title="S·ªë L·∫ßn Kh√°m B·ªánh Theo Tr·∫°ng Th√°i Ph·ª•c H·ªìi",
                color='Ph·ª•c H·ªìi',
                color_discrete_sequence=[COLOR_PALETTE[2], COLOR_PALETTE[3]]
            )
            st.plotly_chart(fig_visits_recovery, use_container_width=True)

            # Nh·∫≠n x√©t v·ªÅ bi·ªÉu ƒë·ªì
            recovered_visits = filtered_df[filtered_df['Ph·ª•c H·ªìi'] == 1]['S·ªë L·∫ßn Kh√°m']
            not_recovered_visits = filtered_df[filtered_df['Ph·ª•c H·ªìi'] == 0]['S·ªë L·∫ßn Kh√°m']

            st.markdown("**Nh·∫≠n X√©t:**")
            st.markdown(f"- B·ªánh nh√¢n kh·ªèi b·ªánh: Trung b√¨nh {recovered_visits.mean():.2f} l·∫ßn kh√°m")
            st.markdown(f"- B·ªánh nh√¢n ch∆∞a kh·ªèi: Trung b√¨nh {not_recovered_visits.mean():.2f} l·∫ßn kh√°m")

    # Tr√¨nh xem d·ªØ li·ªáu th√¥
    if st.checkbox("Xem D·ªØ Li·ªáu G·ªëc"):
        st.dataframe(filtered_df)

# Ch·∫°y ·ª©ng d·ª•ng
if __name__ == "__main__":
    main()

# Y√™u c·∫ßu (t∆∞∆°ng ƒë∆∞∆°ng requirements.txt):
# streamlit
# pandas
# plotly