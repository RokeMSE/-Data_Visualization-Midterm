import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

# Set color palette
sns.set_palette("colorblind")

# --- 1. Data Loading and Preprocessing (Reusable Function) ---
def load_and_preprocess_data(file_path):
    try:
        df = pd.read_csv(file_path, na_values=["None", " ", "UNKNOWN", -1, 999, "NA", "N/A", "NULL", ""])
        df["Age"] = pd.to_numeric(df["Age"], errors='coerce')
        df["Lung Capacity"] = pd.to_numeric(df["Lung Capacity"], errors='coerce')
        df["Hospital Visits"] = pd.to_numeric(df["Hospital Visits"], errors='coerce')
        df["Recovered"] = pd.to_numeric(df["Recovered"], errors='coerce')
        return df
    except FileNotFoundError:
        st.error(f"L·ªói: Kh√¥ng t√¨m th·∫•y t·ªáp t·∫°i {file_path}.")
        st.stop()
    except Exception as e:
        st.error(f"L·ªói: {e}")
        st.stop()



# --- Load Data ---
file_path = "lung_disease_data_preprocessed.csv"
df = load_and_preprocess_data(file_path)
disease_cols = [col for col in df.columns if "Disease Type" in col]

st.markdown("""
    <style>
    div[role="radiogroup"] label {
        display: flex;
        align-items: center;
        font-size: 18px;
        font-weight: bold;
        color: #333;
        padding: 10px 15px;
        border-radius: 8px;
        transition: background-color 0.3s ease, transform 0.2s ease;
        cursor: pointer;
    }

    /* X√≥a d·∫•u ch·∫•m */
    div[role="radiogroup"] label span {
        visibility: hidden;
        width: 0;
        margin: 0;
        padding: 0;
    }

    /* Hi·ªáu ·ª©ng hover */
    div[role="radiogroup"] label:hover {
        background-color: #FF851B;
        color: white !important;
        transform: scale(1.02);
    }

    /* Khi ƒë∆∞·ª£c ch·ªçn */
    div[role="radiogroup"] label[data-selected="true"] {
        background-color: #FF851B !important;
        color: white !important;
        font-weight: bold;
    }
    </style>
""", unsafe_allow_html=True)

# --- Streamlit App ---
st.title("ü´Å B·∫£ng ƒêi·ªÅu Khi·ªÉn B·ªánh Ph·ªïi")

# --- Sidebar Navigation ---
page = st.sidebar.radio("Ch·ªçn Trang", ["1. Gi·ªõi Thi·ªáu D·ªØ Li·ªáu", "2. Th·ªëng K√™ M√¥ T·∫£", "3. Ph√¢n T√≠ch Chuy√™n S√¢u", "4. Nh·∫≠n X√©t Chung"], index=0)

# --- Page 1: Data Introduction ---
if page == "1. Gi·ªõi Thi·ªáu D·ªØ Li·ªáu":
    st.header("1. Gi·ªõi Thi·ªáu D·ªØ Li·ªáu")

    st.subheader("Ngu·ªìn G·ªëc D·ªØ Li·ªáu")
    st.markdown("""
    - **(Thay th·∫ø ph·∫ßn n√†y b·∫±ng th√¥ng tin th·ª±c t·∫ø v·ªÅ ngu·ªìn g·ªëc d·ªØ li·ªáu c·ªßa b·∫°n)**
    - V√≠ d·ª•:
        - D·ªØ li·ªáu ƒë∆∞·ª£c thu th·∫≠p t·ª´ m·ªôt nghi√™n c·ª©u v·ªÅ b·ªánh ph·ªïi t·∫°i [T√™n b·ªánh vi·ªán/trung t√¢m nghi√™n c·ª©u].
        - D·ªØ li·ªáu bao g·ªìm th√¥ng tin c·ªßa [S·ªë l∆∞·ª£ng] b·ªánh nh√¢n trong kho·∫£ng th·ªùi gian t·ª´ [Ng√†y b·∫Øt ƒë·∫ßu] ƒë·∫øn [Ng√†y k·∫øt th√∫c].
        - D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c ·∫©n danh v√† tu√¢n th·ªß c√°c quy ƒë·ªãnh v·ªÅ b·∫£o m·∫≠t th√¥ng tin b·ªánh nh√¢n.
    """)

    st.subheader("M√¥ T·∫£ D·ªØ Li·ªáu")
    st.markdown("""
    - **(Thay th·∫ø ph·∫ßn n√†y b·∫±ng m√¥ t·∫£ chi ti·∫øt v·ªÅ c√°c c·ªôt trong d·ªØ li·ªáu c·ªßa b·∫°n)**
    - V√≠ d·ª•:
        - **Age:** Tu·ªïi c·ªßa b·ªánh nh√¢n (s·ªë nguy√™n).
        - **Lung Capacity:** Dung t√≠ch ph·ªïi c·ªßa b·ªánh nh√¢n (s·ªë th·ª±c, ƒë∆°n v·ªã: ...).
        - **Smoking Status_yes:** T√¨nh tr·∫°ng h√∫t thu·ªëc c·ªßa b·ªánh nh√¢n (1: C√≥, 0: Kh√¥ng).
        - **Hospital Visits:** S·ªë l∆∞·ª£t b·ªánh nh√¢n ƒë·∫øn kh√°m t·∫°i b·ªánh vi·ªán (s·ªë nguy√™n).
        - **Disease Type_...:** C√°c c·ªôt n√†y cho bi·∫øt b·ªánh nh√¢n c√≥ m·∫Øc lo·∫°i b·ªánh ph·ªïi c·ª• th·ªÉ n√†o kh√¥ng (1: C√≥, 0: Kh√¥ng).
        - **Recovered:** B·ªánh nh√¢n ƒë√£ h·ªìi ph·ª•c ch∆∞a? (1: C√≥, 0: Ch∆∞a).
        - **Gender_female:** Gi·ªõi t√≠nh b·ªánh nh√¢n l√† n·ªØ (1: C√≥, 0: Kh√¥ng/Kh√°c).
        - **Gender_male**: Gi·ªõi t√≠nh b·ªánh nh√¢n l√† nam (1: C√≥, 0: Kh√¥ng/Kh√°c).
    """)

    st.subheader("D·ªØ Li·ªáu Th√¥ (M·∫´u)")
    st.dataframe(df.head()) # Show the first few rows

    with st.expander("Xem To√†n B·ªô D·ªØ Li·ªáu Th√¥"):
        st.dataframe(df)


# --- Page 2: Descriptive Statistics ---
elif page == "2. Th·ªëng K√™ M√¥ T·∫£":
    st.header("2. Th·ªëng K√™ M√¥ T·∫£")

    st.subheader("Th√¥ng Tin D·ªØ Li·ªáu ")

    st.subheader("Ph√¢n Ph·ªëi D·ªØ Li·ªáu")
    numeric_cols = df.select_dtypes(include=np.number).columns
    for col in numeric_cols:
        fig, ax = plt.subplots()
        sns.histplot(df[col].dropna(), kde=True, ax=ax)  # Drop NaN values before plotting
        st.pyplot(fig)
        with st.expander(f"Nh·∫≠n x√©t v·ªÅ ph√¢n ph·ªëi c·ªßa {col}"):
          st.markdown(f"""
            - **(Th√™m nh·∫≠n x√©t v·ªÅ h√¨nh d·∫°ng ph√¢n ph·ªëi, ƒë·ªô t·∫≠p trung, ƒë·ªô ph√¢n t√°n, v.v. c·ªßa {col})**
          """)

    st.subheader("Th·ªëng K√™ M√¥ T·∫£ (df.describe())")
    st.dataframe(df.describe())
    with st.expander("Nh·∫≠n x√©t v·ªÅ Th·ªëng K√™ M√¥ T·∫£"):
      st.markdown("""
          - **(Th√™m nh·∫≠n x√©t v·ªÅ c√°c gi√° tr·ªã th·ªëng k√™ nh∆∞ trung b√¨nh, ƒë·ªô l·ªách chu·∫©n, min, max, c√°c kho·∫£ng t·ª© ph√¢n v·ªã, v.v.)**
      """)

# --- Page 3: In-Depth Analysis ---
elif page == "3. Ph√¢n T√≠ch Chuy√™n S√¢u":
    st.header("3. Ph√¢n T√≠ch Chuy√™n S√¢u")
    analysis_page = st.selectbox("Ch·ªçn Ph√¢n T√≠ch", ["Th·ªëng k√™ chung", "Tu·ªïi & Dung T√≠ch Ph·ªïi", "T·ª∑ l·ªá ph·∫ßn trƒÉm ph·ª•c h·ªìi theo lo·∫°i b·ªánh", "Lo·∫°i B·ªánh", "H√∫t Thu·ªëc & Dung T√≠ch Ph·ªïi", "L∆∞·ª£t Kh√°m B·ªánh", "T∆∞∆°ng Quan"])
    
    if analysis_page == "Th·ªëng k√™ chung":
        st.subheader("Th·ªëng K√™ Chung")
        
            # We don't drop NaNs *here* because we want overall stats, including missingness
        total_patients = len(df)
        avg_age = df["Age"].mean()  # mean() automatically handles NaNs
        avg_lung_capacity = df["Lung Capacity"].mean()
        smoking_rate = df["Smoking Status_yes"].mean() * 100

        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("T·ªïng S·ªë B·ªánh Nh√¢n", total_patients)
        with col2:
            st.metric("Tu·ªïi Trung B√¨nh", f"{round(avg_age, 2):.2f}" if not pd.isna(avg_age) else "N/A") # Handle potential NaN in average
        with col3:
            st.metric("Dung T√≠ch Ph·ªïi Trung B√¨nh", f"{round(avg_lung_capacity, 2):.2f}" if not pd.isna(avg_lung_capacity) else "N/A")
        with col4:
            st.metric("T·ª∑ L·ªá H√∫t Thu·ªëc (%)", f"{round(smoking_rate, 2):.2f}" if not pd.isna(smoking_rate) else "N/A")

        with st.expander("Xem Nh·∫≠n X√©t Chi Ti·∫øt"):
            st.markdown(f"""
            - **T·ªïng S·ªë B·ªánh Nh√¢n:** {total_patients}
            - Cho bi·∫øt quy m√¥ c·ªßa t·∫≠p d·ªØ li·ªáu.

            - **Tu·ªïi Trung B√¨nh:** {f'{round(avg_age, 2):.2f}' if not pd.isna(avg_age) else 'N/A'}
            - ƒê·ªô tu·ªïi trung b√¨nh c·ªßa b·ªánh nh√¢n.

            - **Dung T√≠ch Ph·ªïi Trung B√¨nh:** {f'{round(avg_lung_capacity, 2):.2f}' if not pd.isna(avg_lung_capacity) else 'N/A'}
            - Dung t√≠ch ph·ªïi trung b√¨nh.

            - **T·ª∑ L·ªá H√∫t Thu·ªëc:** {f'{round(smoking_rate, 2):.2f}%' if not pd.isna(smoking_rate) else 'N/A'}
            - Ph·∫ßn trƒÉm b·ªánh nh√¢n h√∫t thu·ªëc.
            """)
        with st.expander("Xem D·ªØ Li·ªáu"):
            st.dataframe(df)
        
    if analysis_page == "Tu·ªïi & Dung T√≠ch Ph·ªïi":
      st.subheader("Ph√¢n B·ªë Tu·ªïi & Dung T√≠ch Ph·ªïi")

      # Handle missing values BEFORE filtering (important!)
      filtered_df = df.dropna(subset=["Age", "Lung Capacity"])  # Remove rows where Age OR Lung Capacity is NaN

      # Age Range Slider (only if there are any non-null Ages)
      if not filtered_df["Age"].isnull().all():
        age_range = st.slider("Ch·ªçn Kho·∫£ng Tu·ªïi", int(filtered_df["Age"].min()), int(filtered_df["Age"].max()), (int(filtered_df["Age"].min()), int(filtered_df["Age"].max())))
        filtered_df = filtered_df[(filtered_df["Age"] >= age_range[0]) & (filtered_df["Age"] <= age_range[1])]
      else:
        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu tu·ªïi h·ª£p l·ªá ƒë·ªÉ hi·ªÉn th·ªã.")
        st.stop()

      fig, ax = plt.subplots(1, 2, figsize=(12, 5))
      sns.histplot(filtered_df["Age"], bins=20, kde=True, ax=ax[0])
      ax[0].set_title("Ph√¢n B·ªë Tu·ªïi")
      ax[0].set_xlabel("Tu·ªïi")
      ax[0].set_ylabel("S·ªë L∆∞·ª£ng")
      sns.histplot(filtered_df["Lung Capacity"], bins=20, kde=True, ax=ax[1])
      ax[1].set_title("Ph√¢n B·ªë Dung T√≠ch Ph·ªïi")
      ax[1].set_xlabel("Dung T√≠ch Ph·ªïi")
      ax[1].set_ylabel("S·ªë L∆∞·ª£ng")
      st.pyplot(fig)
      
      with st.expander("Xem Nh·∫≠n X√©t Chi Ti·∫øt"):
        st.markdown(f"""
        **Bi·ªÉu ƒë·ªì Ph√¢n B·ªë Tu·ªïi:**
        - Bi·ªÉu ƒë·ªì n√†y cho th·∫•y s·ª± ph√¢n b·ªë ƒë·ªô tu·ªïi c·ªßa c√°c b·ªánh nh√¢n trong t·∫≠p d·ªØ li·ªáu (ƒë√£ l·ªçc theo kho·∫£ng tu·ªïi v√† lo·∫°i b·ªè c√°c gi√° tr·ªã thi·∫øu).
        - **H√¨nh d·∫°ng ph√¢n b·ªë:** Quan s√°t xem ph√¢n b·ªë c√≥ ƒë·ªëi x·ª©ng, l·ªách tr√°i, l·ªách ph·∫£i hay c√≥ nhi·ªÅu ƒë·ªânh.  V√≠ d·ª•, n·∫øu ph√¢n b·ªë l·ªách ph·∫£i, ƒëi·ªÅu ƒë√≥ c√≥ nghƒ©a l√† c√≥ nhi·ªÅu b·ªánh nh√¢n l·ªõn tu·ªïi h∆°n.
        - **ƒê·ªô t·∫≠p trung:** Xem x√©t kho·∫£ng tu·ªïi n√†o c√≥ t·∫ßn su·∫•t xu·∫•t hi·ªán cao nh·∫•t (ƒë·ªânh c·ªßa bi·ªÉu ƒë·ªì).
        - **ƒê∆∞·ªùng KDE:** ƒê∆∞·ªùng cong KDE (Kernel Density Estimate) gi√∫p ∆∞·ªõc l∆∞·ª£ng h√†m m·∫≠t ƒë·ªô x√°c su·∫•t c·ªßa tu·ªïi, cho th·∫•y xu h∆∞·ªõng chung c·ªßa ph√¢n b·ªë.

        **Bi·ªÉu ƒë·ªì Ph√¢n B·ªë Dung T√≠ch Ph·ªïi:**
        - Bi·ªÉu ƒë·ªì n√†y hi·ªÉn th·ªã s·ª± ph√¢n b·ªë dung t√≠ch ph·ªïi c·ªßa c√°c b·ªánh nh√¢n (ƒë√£ l·ªçc theo kho·∫£ng tu·ªïi v√† lo·∫°i b·ªè c√°c gi√° tr·ªã thi·∫øu).
        - **H√¨nh d·∫°ng ph√¢n b·ªë:** T∆∞∆°ng t·ª± nh∆∞ bi·ªÉu ƒë·ªì tu·ªïi, quan s√°t h√¨nh d·∫°ng (ƒë·ªëi x·ª©ng, l·ªách, nhi·ªÅu ƒë·ªânh).
        - **ƒê·ªô t·∫≠p trung:** X√°c ƒë·ªãnh kho·∫£ng dung t√≠ch ph·ªïi ph·ªï bi·∫øn nh·∫•t.
        - **ƒê·ªô ph√¢n t√°n:** Xem x√©t ƒë·ªô r·ªông c·ªßa ph√¢n b·ªë.  Ph√¢n b·ªë r·ªông cho th·∫•y s·ª± kh√°c bi·ªát l·ªõn v·ªÅ dung t√≠ch ph·ªïi gi·ªØa c√°c b·ªánh nh√¢n.  Ph√¢n b·ªë h·∫πp cho th·∫•y dung t√≠ch ph·ªïi t∆∞∆°ng ƒë·ªëi ƒë·ªìng ƒë·ªÅu.
        - **ƒê∆∞·ªùng KDE:** ƒê∆∞·ªùng cong KDE ∆∞·ªõc t√≠nh m·∫≠t ƒë·ªô x√°c su·∫•t, cho th·∫•y xu h∆∞·ªõng chung.
        - **So s√°nh v·ªõi ƒë·ªô tu·ªïi:** C√≥ th·ªÉ c√≥ m·ªëi li√™n h·ªá gi·ªØa ƒë·ªô tu·ªïi v√† dung t√≠ch ph·ªïi.  V√≠ d·ª•, dung t√≠ch ph·ªïi c√≥ th·ªÉ gi·∫£m d·∫ßn theo tu·ªïi.
        """)
      
    elif analysis_page == "Lo·∫°i B·ªánh":
        st.subheader("Ph√¢n B·ªë Lo·∫°i B·ªánh")
        disease_counts = df[disease_cols].sum()
        st.bar_chart(disease_counts)
        
        with st.expander("Xem Nh·∫≠n X√©t Chi Ti·∫øt"):
            st.markdown("""
            **Bi·ªÉu ƒë·ªì C·ªôt Ph√¢n B·ªë Lo·∫°i B·ªánh:**
            - Bi·ªÉu ƒë·ªì n√†y th·ªÉ hi·ªán s·ªë l∆∞·ª£ng b·ªánh nh√¢n m·∫Øc m·ªói lo·∫°i b·ªánh ph·ªïi ƒë∆∞·ª£c ghi nh·∫≠n trong d·ªØ li·ªáu.
            - **So s√°nh t·∫ßn su·∫•t:** X√°c ƒë·ªãnh lo·∫°i b·ªánh n√†o ph·ªï bi·∫øn nh·∫•t (c·ªôt cao nh·∫•t) v√† lo·∫°i b·ªánh n√†o √≠t g·∫∑p nh·∫•t (c·ªôt th·∫•p nh·∫•t).
            - **Ch√™nh l·ªách:** ƒê√°nh gi√° m·ª©c ƒë·ªô ch√™nh l·ªách v·ªÅ s·ªë l∆∞·ª£ng b·ªánh nh√¢n gi·ªØa c√°c lo·∫°i b·ªánh. S·ª± ch√™nh l·ªách l·ªõn c√≥ th·ªÉ g·ª£i √Ω v·ªÅ c√°c y·∫øu t·ªë nguy c∆° ho·∫∑c ƒë·∫∑c ƒëi·ªÉm d·ªãch t·ªÖ c·ªßa t·ª´ng b·ªánh.
            - **T·ªïng s·ªë b·ªánh nh√¢n:** L∆∞u √Ω r·∫±ng t·ªïng s·ªë l∆∞·ª£ng b·ªánh nh√¢n tr√™n bi·ªÉu ƒë·ªì n√†y c√≥ th·ªÉ l·ªõn h∆°n t·ªïng s·ªë b·ªánh nh√¢n trong t·∫≠p d·ªØ li·ªáu, v√¨ m·ªôt b·ªánh nh√¢n c√≥ th·ªÉ m·∫Øc nhi·ªÅu lo·∫°i b·ªánh c√πng l√∫c.
            """)
        
    elif analysis_page == "H√∫t Thu·ªëc & Dung T√≠ch Ph·ªïi":
      st.subheader("·∫¢nh H∆∞·ªüng c·ªßa H√∫t Thu·ªëc l√™n Dung T√≠ch Ph·ªïi")

      # --- Handle missing values BEFORE plotting ---
      plot_df = df.dropna(subset=["Smoking Status_yes", "Lung Capacity"])

      # Boxplot
      fig1, ax1 = plt.subplots(figsize=(6, 4))
      sns.boxplot(x=plot_df["Smoking Status_yes"], y=plot_df["Lung Capacity"], ax=ax1)
      ax1.set_xticklabels(["Kh√¥ng H√∫t Thu·ªëc", "H√∫t Thu·ªëc"])
      ax1.set_xlabel("T√¨nh Tr·∫°ng H√∫t Thu·ªëc")
      ax1.set_ylabel("Dung T√≠ch Ph·ªïi")
      st.pyplot(fig1)
      
      with st.expander("Xem Nh·∫≠n X√©t Chi Ti·∫øt (Bi·ªÉu ƒë·ªì H·ªôp)"):
        st.markdown("""
        **Bi·ªÉu ƒë·ªì H·ªôp (Boxplot):**
        - Bi·ªÉu ƒë·ªì n√†y so s√°nh ph√¢n b·ªë dung t√≠ch ph·ªïi gi·ªØa hai nh√≥m: ng∆∞·ªùi kh√¥ng h√∫t thu·ªëc v√† ng∆∞·ªùi h√∫t thu·ªëc (sau khi lo·∫°i b·ªè c√°c gi√° tr·ªã thi·∫øu).
        - **Trung v·ªã:** So s√°nh v·ªã tr√≠ ƒë∆∞·ªùng k·∫ª gi·ªØa (trung v·ªã) c·ªßa hai h·ªôp. N·∫øu trung v·ªã c·ªßa nh√≥m h√∫t thu·ªëc th·∫•p h∆°n, ƒëi·ªÅu ƒë√≥ cho th·∫•y dung t√≠ch ph·ªïi trung b√¨nh c·ªßa nh√≥m n√†y th·∫•p h∆°n.
        - **IQR (Kho·∫£ng t·ª© ph√¢n v·ªã):** So s√°nh ƒë·ªô cao c·ªßa hai h·ªôp. IQR l·ªõn h∆°n cho th·∫•y s·ª± ph√¢n t√°n d·ªØ li·ªáu l·ªõn h∆°n (dung t√≠ch ph·ªïi c√≥ nhi·ªÅu bi·∫øn ƒë·ªông h∆°n).
        - **R√¢u:** So s√°nh ƒë·ªô d√†i c·ªßa r√¢u. R√¢u d√†i h∆°n cho th·∫•y ph·∫°m vi dung t√≠ch ph·ªïi r·ªông h∆°n.
        - **ƒêi·ªÉm ngo·∫°i lai:** C√°c ƒëi·ªÉm n·∫±m ngo√†i r√¢u l√† c√°c gi√° tr·ªã b·∫•t th∆∞·ªùng. Xem x√©t li·ªáu c√≥ nhi·ªÅu ƒëi·ªÉm ngo·∫°i lai ·ªü m·ªôt trong hai nh√≥m hay kh√¥ng.
        - **K·∫øt lu·∫≠n s∆° b·ªô:** D·ª±a tr√™n so s√°nh tr·ª±c quan, c√≥ th·ªÉ ƒë∆∞a ra k·∫øt lu·∫≠n s∆° b·ªô v·ªÅ ·∫£nh h∆∞·ªüng c·ªßa h√∫t thu·ªëc l√™n dung t√≠ch ph·ªïi.
        """)
        
      # Scatter Plot
      fig2, ax2 = plt.subplots(figsize=(8, 6))
      sns.scatterplot(x=plot_df["Smoking Status_yes"], y=plot_df["Lung Capacity"], data=plot_df, ax=ax2, alpha=0.3)
      ax2.set_xlabel("T√¨nh Tr·∫°ng H√∫t Thu·ªëc (0: Kh√¥ng H√∫t, 1: C√≥ H√∫t)")
      ax2.set_ylabel("Dung T√≠ch Ph·ªïi")
      st.pyplot(fig2)
      
      with st.expander("Xem Nh·∫≠n X√©t Chi Ti·∫øt (Bi·ªÉu ƒë·ªì Ph√¢n T√°n)"):
        st.markdown("""
        **Bi·ªÉu ƒë·ªì Ph√¢n T√°n (Scatter Plot):**
        - Bi·ªÉu ƒë·ªì n√†y th·ªÉ hi·ªán m·ªëi quan h·ªá gi·ªØa t√¨nh tr·∫°ng h√∫t thu·ªëc (0: Kh√¥ng h√∫t, 1: C√≥ h√∫t) v√† dung t√≠ch ph·ªïi c·ªßa t·ª´ng b·ªánh nh√¢n (sau khi lo·∫°i b·ªè gi√° tr·ªã thi·∫øu).
        - **M·ªói ƒëi·ªÉm:** M·ªói ƒëi·ªÉm tr√™n bi·ªÉu ƒë·ªì ƒë·∫°i di·ªán cho m·ªôt b·ªánh nh√¢n.
        - **Xu h∆∞·ªõng:** Quan s√°t xem c√≥ xu h∆∞·ªõng n√†o kh√¥ng (v√≠ d·ª•: c√°c ƒëi·ªÉm c√≥ xu h∆∞·ªõng d·ªëc xu·ªëng khi x tƒÉng kh√¥ng).
        - **Ph√¢n t√°n:**  ƒê·ªô ph√¢n t√°n c·ªßa c√°c ƒëi·ªÉm cho bi·∫øt m·ª©c ƒë·ªô m·∫°nh y·∫øu c·ªßa m·ªëi quan h·ªá.
        - **K·∫øt h·ª£p v·ªõi Boxplot:**  K·∫øt h·ª£p th√¥ng tin t·ª´ bi·ªÉu ƒë·ªì ph√¢n t√°n v√† bi·ªÉu ƒë·ªì h·ªôp ƒë·ªÉ c√≥ c√°i nh√¨n to√†n di·ªán h∆°n.
        """)

      # T-test (fully manual, no scipy)
      smokers = plot_df[plot_df["Smoking Status_yes"] == 1]["Lung Capacity"]
      non_smokers = plot_df[plot_df["Smoking Status_yes"] == 0]["Lung Capacity"]

      if len(smokers) > 0 and len(non_smokers) > 0:
          # Calculate t-statistic and p-value manually
          mean_smokers = np.mean(smokers)
          mean_non_smokers = np.mean(non_smokers)
          std_smokers = np.std(smokers, ddof=1)
          std_non_smokers = np.std(non_smokers, ddof=1)
          n_smokers = len(smokers)
          n_non_smokers = len(non_smokers)
          sp = np.sqrt(((n_smokers - 1) * std_smokers**2 + (n_non_smokers - 1) * std_non_smokers**2) / (n_smokers + n_non_smokers - 2))
          t_stat = (mean_smokers - mean_non_smokers) / (sp * np.sqrt(1/n_smokers + 1/n_non_smokers))
          df_ttest = n_smokers + n_non_smokers - 2

          def z_to_p(z):
              z = abs(z)
              if z > 3.7:
                  return 0.0
              p = 1 / (1 + np.exp(0.07056 * z**3 + 1.5976 * z))
              return 2 * (1 - p)

          p_value = z_to_p(t_stat)

          st.write(f"Ki·ªÉm ƒë·ªãnh t-test: t-statistic = {t_stat:.2f}, p-value = {p_value:.3f}")
          with st.expander("Gi·∫£i th√≠ch k·∫øt qu·∫£ t-test"):
              st.markdown(f"""
                - **t-statistic:** {t_stat:.2f} (ƒêo l∆∞·ªùng s·ª± kh√°c bi·ªát gi·ªØa trung b√¨nh c·ªßa hai nh√≥m).
                - **p-value:** {p_value:.3f} (X√°c su·∫•t c·ªßa k·∫øt qu·∫£ n·∫øu kh√¥ng c√≥ s·ª± kh√°c bi·ªát th·ª±c s·ª±).
                - **√ù nghƒ©a th·ªëng k√™:** p < 0.05: C√≥ s·ª± kh√°c bi·ªát. p >= 0.05: Kh√¥ng ƒë·ªß b·∫±ng ch·ª©ng.
                """)
      else:
          st.write("Kh√¥ng th·ªÉ th·ª±c hi·ªán ki·ªÉm ƒë·ªãnh t-test: M·ªôt ho·∫∑c c·∫£ hai nh√≥m kh√¥ng c√≥ d·ªØ li·ªáu.")
        
    elif analysis_page == "L∆∞·ª£t Kh√°m B·ªánh":
      st.subheader("L∆∞·ª£t Kh√°m B·ªánh Trung B√¨nh theo Lo·∫°i B·ªánh")

      # Multiselect for disease types
      selected_diseases = st.multiselect("Ch·ªçn Lo·∫°i B·ªánh", disease_cols, default=disease_cols)

      if selected_diseases:
          # Handle missing values *before* calculating the mean
            visits_per_disease = {col: df[df[col] == 1]["Hospital Visits"].dropna().mean() for col in selected_diseases}
            st.bar_chart(pd.Series(visits_per_disease))
            with st.expander("Xem Nh·∫≠n X√©t Chi Ti·∫øt"):
                st.markdown("""
                    **Bi·ªÉu ƒë·ªì C·ªôt L∆∞·ª£t Kh√°m B·ªánh Trung B√¨nh:**
                    - Bi·ªÉu ƒë·ªì n√†y hi·ªÉn th·ªã s·ªë l∆∞·ª£t kh√°m b·ªánh trung b√¨nh cho c√°c lo·∫°i b·ªánh ph·ªïi *ƒë√£ ch·ªçn*.
                    - **So s√°nh:** So s√°nh chi·ªÅu cao c·ªßa c√°c c·ªôt.
                    - **Gi√° tr·ªã c·ª• th·ªÉ:** Ch√∫ √Ω ƒë·∫øn c√°c gi√° tr·ªã trung b√¨nh.
                    - **L∆∞u √Ω:** S·ªë l∆∞·ª£t kh√°m trung b√¨nh cao c√≥ th·ªÉ do nhi·ªÅu nguy√™n nh√¢n.
                    - **K·∫øt h·ª£p:** N√™n k·∫øt h·ª£p th√¥ng tin v·ªõi c√°c bi·ªÉu ƒë·ªì kh√°c.
                """)
      else:
          st.write("Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt lo·∫°i b·ªánh.")
        
    elif analysis_page == "T∆∞∆°ng Quan":
        st.subheader("Bi·ªÉu ƒê·ªì T∆∞∆°ng Quan (Heatmap)")

        # Calculate correlation matrix, handling missing values appropriately.
        corr_matrix = df.corr(numeric_only=True)
        fig, ax = plt.subplots(figsize=(10, 8))
        sns.heatmap(corr_matrix, annot=True, cmap="coolwarm", fmt=".2f", ax=ax)
        st.pyplot(fig)
        with st.expander("Xem Nh·∫≠n X√©t Chi Ti·∫øt"):
            st.markdown("""
            **Bi·ªÉu ƒë·ªì Nhi·ªát T∆∞∆°ng Quan (Heatmap):**
            - Bi·ªÉu ƒë·ªì n√†y th·ªÉ hi·ªán *m·ªëi t∆∞∆°ng quan tuy·∫øn t√≠nh* gi·ªØa c√°c c·∫∑p bi·∫øn s·ªë.
            - **Gi·∫£i th√≠ch:** G·∫ßn 1: T∆∞∆°ng quan d∆∞∆°ng m·∫°nh. G·∫ßn -1: T∆∞∆°ng quan √¢m m·∫°nh. G·∫ßn 0: Y·∫øu.
            - **M√†u s·∫Øc:** ƒê·ªè: D∆∞∆°ng. Xanh: √Çm. ƒê·∫≠m: M·∫°nh.
            - **C·∫£nh b√°o:** T∆∞∆°ng quan kh√¥ng ph·∫£i nh√¢n qu·∫£. Ch·ªâ tuy·∫øn t√≠nh.
            - **C√°ch s·ª≠ d·ª•ng:** T√¨m c·∫∑p bi·∫øn t∆∞∆°ng quan m·∫°nh.
            """)
    

# --- Page 4: Overall Conclusions ---
elif page == "4. Nh·∫≠n X√©t Chung":
    avg_age = df["Age"].mean()
    smoking_rate = df["Smoking Status_yes"].mean() * 100
    avg_hospital_visits = df["Hospital Visits"].mean()
    male_percentage = df["Gender_male"].mean() * 100
    female_percentage = df["Gender_female"].mean() * 100
    
    st.header("4. Nh·∫≠n X√©t Chung")

    st.markdown(f"""
    - **T·ªïng Quan v·ªÅ D·ªØ Li·ªáu v√† K·∫øt Qu·∫£ Ph√¢n T√≠ch:**
        - **M·ªëi T∆∞∆°ng Quan gi·ªØa H√∫t Thu·ªëc v√† Dung T√≠ch Ph·ªïi:**
            - D·ªØ li·ªáu cho th·∫•y m·ªëi t∆∞∆°ng quan ƒë√°ng k·ªÉ gi·ªØa h√∫t thu·ªëc v√† dung t√≠ch ph·ªïi. C·ª• th·ªÉ, nh·ªØng **b·ªánh nh√¢n h√∫t thu·ªëc** c√≥ xu h∆∞·ªõng c√≥ **dung t√≠ch ph·ªïi th·∫•p h∆°n** so v·ªõi nh·ªØng b·ªánh nh√¢n kh√¥ng h√∫t thu·ªëc.
            - ƒêi·ªÅu n√†y c√≥ th·ªÉ ƒë∆∞·ª£c gi·∫£i th√≠ch b·ªüi t√°c ƒë·ªông ti√™u c·ª±c c·ªßa kh√≥i thu·ªëc l√° l√™n h·ªá h√¥ h·∫•p, g√¢y ra c√°c b·ªánh l√Ω nh∆∞ vi√™m ph·∫ø qu·∫£n m√£n t√≠nh v√† COPD.
        - **Ph·ªï Bi·∫øn c·ªßa B·ªánh Bronchitis:**
            - B·ªánh **Bronchitis (Vi√™m ph·∫ø qu·∫£n)** l√† lo·∫°i b·ªánh ph·ªïi **ph·ªï bi·∫øn nh·∫•t** trong t·∫≠p d·ªØ li·ªáu. ƒêi·ªÅu n√†y c√≥ th·ªÉ ph·∫£n √°nh t√¨nh tr·∫°ng √¥ nhi·ªÖm kh√¥ng kh√≠ ho·∫∑c th√≥i quen h√∫t thu·ªëc l√° ph·ªï bi·∫øn trong c·ªông ƒë·ªìng.
        - **Tu·ªïi Trung B√¨nh c·ªßa B·ªánh Nh√¢n:**
            - Tu·ªïi trung b√¨nh c·ªßa b·ªánh nh√¢n l√† **{avg_age:.2f} tu·ªïi**, v√† c√≥ s·ª± kh√°c bi·ªát v·ªÅ dung t√≠ch ph·ªïi gi·ªØa c√°c nh√≥m tu·ªïi. Nh√≥m tu·ªïi l·ªõn h∆°n c√≥ xu h∆∞·ªõng c√≥ dung t√≠ch ph·ªïi th·∫•p h∆°n, c√≥ th·ªÉ do s·ª± suy gi·∫£m ch·ª©c nƒÉng ph·ªïi theo tu·ªïi t√°c.
        - **T√¨nh Tr·∫°ng H√∫t Thu·ªëc:**
            - T·ª∑ l·ªá b·ªánh nh√¢n h√∫t thu·ªëc trong t·∫≠p d·ªØ li·ªáu l√† **{smoking_rate:.2f}%**. ƒêi·ªÅu n√†y c√≥ th·ªÉ cho th·∫•y m·ª©c ƒë·ªô ph·ªï bi·∫øn c·ªßa th√≥i quen h√∫t thu·ªëc trong c·ªông ƒë·ªìng b·ªánh nh√¢n.
        - **S·ªë L∆∞·ª£t Kh√°m B·ªánh:**
            - S·ªë l∆∞·ª£t kh√°m b·ªánh trung b√¨nh c·ªßa b·ªánh nh√¢n l√† **{avg_hospital_visits:.2f}**. ƒêi·ªÅu n√†y c√≥ th·ªÉ ph·∫£n √°nh m·ª©c ƒë·ªô nghi√™m tr·ªçng c·ªßa b·ªánh v√† nhu c·∫ßu chƒÉm s√≥c y t·∫ø c·ªßa b·ªánh nh√¢n.
        - **Gi·ªõi T√≠nh:**
            - T·ª∑ l·ªá b·ªánh nh√¢n nam v√† n·ªØ trong t·∫≠p d·ªØ li·ªáu l√† **{male_percentage:.2f}%** v√† **{female_percentage:.2f}%**. ƒêi·ªÅu n√†y c√≥ th·ªÉ cho th·∫•y s·ª± ph√¢n b·ªë gi·ªõi t√≠nh trong c·ªông ƒë·ªìng b·ªánh nh√¢n.
            Trong nh·ªØng nƒÉm g·∫ßn ƒë√¢y, t·ª∑ l·ªá h√∫t thu·ªëc ·ªü n·ªØ gi·ªõi c√≥ xu h∆∞·ªõng tƒÉng l√™n, ƒëi·ªÅu n√†y c√≥ th·ªÉ d·∫´n ƒë·∫øn s·ª± gia tƒÉng c√°c b·ªánh l√Ω li√™n quan ƒë·∫øn ph·ªïi ·ªü n·ªØ gi·ªõi. Ngo√†i ra c√°c nghi√™n c·ª©u c≈©ng
            ch·ªâ ra r·∫±ng n·ªØ gi·ªõi c√≥ th·ªÉ nh·∫°y c·∫£m h∆°n v·ªõi c√°c t√°c ƒë·ªông ti√™u c·ª±c c·ªßa kh√≥i thu·ªëc l√° so v·ªõi nam gi·ªõi, d·∫´n ƒë·∫øn nguy c∆° cao h∆°n m·∫Øc c√°c b·ªánh ph·ªïi.
        - **Nhu C·∫ßu Nghi√™n C·ª©u Th√™m:**
            - C·∫ßn c√≥ th√™m nghi√™n c·ª©u ƒë·ªÉ x√°c ƒë·ªãnh nguy√™n nh√¢n v√† c√°c y·∫øu t·ªë nguy c∆° c·ªßa c√°c b·ªánh ph·ªïi n√†y. ƒêi·ªÅu n√†y bao g·ªìm vi·ªác xem x√©t c√°c y·∫øu t·ªë m√¥i tr∆∞·ªùng, di truy·ªÅn v√† l·ªëi s·ªëng kh√°c c√≥ th·ªÉ ·∫£nh h∆∞·ªüng ƒë·∫øn s·ª©c kh·ªèe ph·ªïi.
    """)
    
    st.subheader("H·∫°n Ch·∫ø")
    st.markdown("""
      - **H·∫°n Ch·∫ø c·ªßa D·ªØ Li·ªáu v√† Ph√¢n T√≠ch:**
        - **K√≠ch Th∆∞·ªõc M·∫´u:**
            - K√≠ch th∆∞·ªõc m·∫´u c√≥ th·ªÉ kh√¥ng ƒë·ªß l·ªõn ƒë·ªÉ ƒë∆∞a ra k·∫øt lu·∫≠n ch·∫Øc ch·∫Øn. M·ªôt m·∫´u l·ªõn h∆°n s·∫Ω cung c·∫•p k·∫øt qu·∫£ ƒë√°ng tin c·∫≠y h∆°n v√† gi·∫£m thi·ªÉu sai s·ªë th·ªëng k√™.
        - **Thi·∫øu S√≥t D·ªØ Li·ªáu:**
            - D·ªØ li·ªáu c√≥ th·ªÉ b·ªã thi·∫øu s√≥t ho·∫∑c kh√¥ng ƒë·∫ßy ƒë·ªß, ·∫£nh h∆∞·ªüng ƒë·∫øn ƒë·ªô ch√≠nh x√°c c·ªßa ph√¢n t√≠ch. V√≠ d·ª•, m·ªôt s·ªë b·ªánh nh√¢n c√≥ th·ªÉ kh√¥ng cung c·∫•p ƒë·∫ßy ƒë·ªß th√¥ng tin v·ªÅ t√¨nh tr·∫°ng h√∫t thu·ªëc ho·∫∑c dung t√≠ch ph·ªïi.
        - **Bi·∫øn Quan Tr·ªçng Ch∆∞a ƒê∆∞·ª£c Thu Th·∫≠p:**
            - M·ªôt s·ªë bi·∫øn quan tr·ªçng c√≥ th·ªÉ ch∆∞a ƒë∆∞·ª£c thu th·∫≠p ho·∫∑c xem x√©t trong ph√¢n t√≠ch. C√°c y·∫øu t·ªë nh∆∞ ch·∫ø ƒë·ªô ƒÉn u·ªëng, m√¥i tr∆∞·ªùng s·ªëng, v√† ti·ªÅn s·ª≠ b·ªánh l√Ω gia ƒë√¨nh c√≥ th·ªÉ ·∫£nh h∆∞·ªüng ƒë·∫øn s·ª©c kh·ªèe ph·ªïi nh∆∞ng kh√¥ng c√≥ trong d·ªØ li·ªáu.
        - **T∆∞∆°ng Quan Kh√¥ng ƒê·ªìng Nghƒ©a v·ªõi Nh√¢n Qu·∫£:**
            - T∆∞∆°ng quan kh√¥ng ƒë·ªìng nghƒ©a v·ªõi nh√¢n qu·∫£; c·∫ßn c√≥ th√™m nghi√™n c·ª©u ƒë·ªÉ x√°c ƒë·ªãnh m·ªëi quan h·ªá nh√¢n qu·∫£. V√≠ d·ª•, m·∫∑c d√π c√≥ m·ªëi t∆∞∆°ng quan gi·ªØa h√∫t thu·ªëc v√† dung t√≠ch ph·ªïi, kh√¥ng th·ªÉ k·∫øt lu·∫≠n r·∫±ng h√∫t thu·ªëc l√† nguy√™n nh√¢n duy nh·∫•t g√¢y ra gi·∫£m dung t√≠ch ph·ªïi.
    """)

    st.subheader("ƒê·ªÅ Xu·∫•t Nghi√™n C·ª©u Ti·∫øp Theo")
    st.markdown("""
      - **ƒê·ªÅ Xu·∫•t cho Nghi√™n C·ª©u Ti·∫øp Theo:**
        - **Thu Th·∫≠p Th√™m D·ªØ Li·ªáu:**
            - Thu th·∫≠p th√™m d·ªØ li·ªáu ƒë·ªÉ tƒÉng k√≠ch th∆∞·ªõc m·∫´u v√† ƒë·ªô tin c·∫≠y c·ªßa k·∫øt qu·∫£. ƒêi·ªÅu n√†y bao g·ªìm vi·ªác m·ªü r·ªông ph·∫°m vi nghi√™n c·ª©u ƒë·ªÉ bao g·ªìm nhi·ªÅu b·ªánh nh√¢n h∆°n t·ª´ c√°c khu v·ª±c ƒë·ªãa l√Ω kh√°c nhau.
        - **B·ªï Sung C√°c Bi·∫øn Quan Tr·ªçng:**
            - B·ªï sung c√°c bi·∫øn quan tr·ªçng kh√°c c√≥ th·ªÉ ·∫£nh h∆∞·ªüng ƒë·∫øn b·ªánh ph·ªïi, nh∆∞ ch·∫ø ƒë·ªô ƒÉn u·ªëng, m√¥i tr∆∞·ªùng s·ªëng, v.v. ƒêi·ªÅu n√†y s·∫Ω gi√∫p hi·ªÉu r√µ h∆°n v·ªÅ c√°c y·∫øu t·ªë nguy c∆° v√† b·∫£o v·ªá s·ª©c kh·ªèe ph·ªïi.
        - **Nghi√™n C·ª©u S√¢u H∆°n v·ªÅ M·ªëi Quan H·ªá Nh√¢n Qu·∫£:**
            - Th·ª±c hi·ªán c√°c nghi√™n c·ª©u s√¢u h∆°n ƒë·ªÉ x√°c ƒë·ªãnh m·ªëi quan h·ªá nh√¢n qu·∫£ gi·ªØa c√°c y·∫øu t·ªë nguy c∆° v√† b·ªánh ph·ªïi. S·ª≠ d·ª•ng c√°c ph∆∞∆°ng ph√°p nghi√™n c·ª©u nh∆∞ th·ª≠ nghi·ªám l√¢m s√†ng ho·∫∑c nghi√™n c·ª©u theo d√µi d√†i h·∫°n ƒë·ªÉ x√°c ƒë·ªãnh nguy√™n nh√¢n ch√≠nh x√°c.
        - **S·ª≠ D·ª•ng C√°c Ph∆∞∆°ng Ph√°p Ph√¢n T√≠ch Ti√™n Ti·∫øn:**
            - S·ª≠ d·ª•ng c√°c ph∆∞∆°ng ph√°p ph√¢n t√≠ch ti√™n ti·∫øn h∆°n ƒë·ªÉ kh√°m ph√° c√°c m·ªëi quan h·ªá ph·ª©c t·∫°p trong d·ªØ li·ªáu. C√°c ph∆∞∆°ng ph√°p nh∆∞ ph√¢n t√≠ch ƒëa bi·∫øn, m√¥ h√¨nh h·ªçc m√°y, v√† ph√¢n t√≠ch m·∫°ng c√≥ th·ªÉ gi√∫p ph√°t hi·ªán c√°c m·ªëi quan h·ªá ·∫©n v√† d·ª± ƒëo√°n nguy c∆° b·ªánh ph·ªïi.
    """)